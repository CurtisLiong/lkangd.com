__NUXT_JSONP__("/post/develop-good-git-commit-habits", (function(a){return {data:[{post:{attributes:{title:"何为「Git Commit」最佳姿势？",date:"2020-05-15",spoiler:"让你的每一个「Git Commit」更有价值，而不是形式主义下的流水账",featured:true,link:a,min2read:"☕️☕️☕️☕️☕️ 26 min read",wordcount:"6k"},body:"\u003Cp\u003E\u003Cdiv class=\"cs-toc-dom\"\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"#xiancongtijiaogeshirushou\"\u003E先从提交格式入手\u003C\u002Fa\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"#Commitmessagedegeshi\"\u003ECommit message 的格式\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#shiyongtijiaofuzhugongju\"\u003E使用提交辅助工具\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#qiangzhixiaoyantijiaogeshi\"\u003E强制校验提交格式\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#guifanhebingtuisongliucheng\"\u003E规范合并推送流程\u003C\u002Fa\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"#shiyongrebasehebing\"\u003E使用 rebase 合并\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#yuanchengmasterfenzhiquanxiankongzhi\"\u003E远程 master 分支权限控制\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#helifencha\"\u003E合理分叉\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#jieyan\"\u003E结言\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003C\u002Fdiv\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E大部分技术团队都会选择 git 来作为代码库的版本管理工具，但是由于规范的缺失和技术人员 git 技能不达标的原因，很容易写出很敷衍潦草的「commit」描述和随意地合并推送到远程分支，导致「git log」日志看起来乱糟糟的。在项目工程化的角度而言，一个规范清晰的的「git log」日志是很重要的，因为它反映了项目是如何紧跟业务进行一步步迭代下来的，就像是软件开发的航海日志、黑匣子，在遇到「风浪」时，能快速定位问题和进行版本回退。\u003C\u002Fp\u003E\n\u003Cp\u003E首先来看一段 \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fvuejs\u002Fvue\" target=\"_blank\"\u003EVue\u003C\u002Fa\u003E 的「git log」记录，它长这样：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E* 7721febc (tag: v2.6.0-beta.3) build: release 2.6.0-beta.3 - Evan You, 1 year, 5 months ago\n* 9f3cbafa build: build 2.6.0-beta.3 - Evan You, 1 year, 5 months ago\n* 2afa1d05 build: fix feature flags for esm builds - Evan You, 1 year, 5 months ago\n* c9e3a5d1 feat: detect and warn invalid dynamic argument expressions - Evan You, 1 year, 5 months ago\n* 624c7993 (tag: v2.6.0-beta.2) build: release 2.6.0-beta.2 - Evan You, 1 year, 5 months ago\n* 90f47d1b build: build 2.6.0-beta.2 - Evan You, 1 year, 5 months ago\n* dbc05825 feat: dynamic directive arguments for v-on, v-bind and custom directives (#9373) - Evan You, 1 year, 5 months ago\n* f219beda perf: improve scoped slots change detection accuracy (#9371) - Evan You, 1 year, 5 months ago\n| * 8b8921b2 (origin\u002Fdynamic-directive-arguments) feat: dynamic args for custom directives - Evan You, 1 year, 5 months ago\n| * 2910d401 test: test cases for v-on\u002Fv-bind dynamic arguments - Evan You, 1 year, 5 months ago\n| * 49c6f29f refactor: v-bind dynamic arguments use bind helper - Evan You, 1 year, 5 months ago\n| * 5b5f6663 test: fix tests, resolve helper conflict - Evan You, 1 year, 5 months ago\n| * 2ba897eb fix: fix middle modifier - Evan You, 1 year, 5 months ago\n| * 5cb59b1f feat: handle dynamic argument for v-bind.sync - Evan You, 1 year, 5 months ago\n| * c6f480ca feat: dynamic directive arguments for v-bind and v-on - Evan You, 1 year, 5 months ago\n|\u002F\n| * d91a38ab (origin\u002Fslot-optimization) perf: improve scoped slots change detection accuracy - Evan You, 1 year, 5 months ago\n|\u002F\n* 770c6ed6 refactor: extend dom-props update skip to more all keys except value - Evan You, 1 year, 5 months ago\n* 18685614 fix: fix checkbox event edge case in Firefox - Evan You, 1 year, 5 months ago\n* 8cb2069a test: fix tests in IE\u002FEdge - Evan You, 1 year, 5 months ago\n* 32072e8a refactor: simplify timestamp check - Evan You, 1 year, 5 months ago\n* 60a277ca chore: update comment - Evan You, 1 year, 5 months ago\n* ba0ebd47 fix: async edge case fix should apply to more browsers - Evan You, 1 year, 5 months ago\n* ba9907c7 chore: update sponsor - Evan You, 1 year, 6 months ago\n* 8d845724 feat: warning for ambiguous v-slot usage - Evan You, 1 year, 6 months ago\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E提交描述清晰，规范整洁。\u003C\u002Fp\u003E\n\u003Cp\u003E但是我们看过的大多数「git log」日志却是下面这样的：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E| * | | | | | | e63cdb7f htmlPlugin baseConf 中引入 - lisi, 8 months ago\n| * | | | | | |   d6481470 Merge remote-tracking branch 'origin\u002Fmaster' into build-merge - lisi, 8 months ago\n| |\\ \\ \\ \\ \\ \\ \\\n| * | | | | | | | 551b601b 商品详情富文本图片懒加载 - lisi, 8 months ago\n| * | | | | | | |   804b8589 Merge branch 'master' into build-merge - lisi, 8 months ago\n| |\\ \\ \\ \\ \\ \\ \\ \\\n| * | | | | | | | | dd7b66b9 cacheLoader - lisi, 8 months ago\n| * | | | | | | | | 0e91b705 构建脚本 - lisi, 8 months ago\n| * | | | | | | | | 552d8576 sass 深度选择器 \u002Fdeep\u002F =&gt; &gt;&gt;&gt; - lisi, 8 months ago\n| * | | | | | | | | f29a0dbb 改目录结构 - lisi, 8 months ago\n* | | | | | | | | |   a930dda2 (tag: v20191119) Merge branch 'alipayFix' into 'master' - wangwu, 8 months ago\n|\\ \\ \\ \\ \\ \\ \\ \\ \\ \\\n| |_|_|\u002F \u002F \u002F \u002F \u002F \u002F \u002F\n|\u002F| | | | | | | \u002F \u002F\n| | |_|_|_|_|_|\u002F \u002F\n| |\u002F| | | | | | |\n| * | | | | | | | 2d29a500 支付宝提示文案 - lisi, 8 months ago\n| | |_|_|_|_|\u002F \u002F\n| |\u002F| | | | | |\n| * | | | | | | a6313a9e 混合支付 支付宝提示框 - lisi, 8 months ago\n| | |_|_|_|\u002F \u002F\n| |\u002F| | | | |\n| * | | | | | 75b452e3 默认选中支付方式 - lisi, 8 months ago\n| | |_|_|\u002F \u002F\n| |\u002F| | | |\n| * | | | | a1d3de5e payTypeShow 隐藏支付宝 - lisi, 8 months ago\n| | |_|\u002F \u002F\n| |\u002F| | |\n| * | | | a0358dde 下线 支付宝支付 - lisi, 8 months ago\n|\u002F \u002F \u002F \u002F\n* | | |   6be57861 Merge branch 'patch-1' into 'master' - zhangsan, 8 months ago\n|\\ \\ \\ \\\n| |_|\u002F \u002F\n|\u002F| | |\n| * | | 4e8f204b (origin\u002Fpatch-1) 去营销 - zhangsan, 8 months ago\n|\u002F \u002F \u002F\n* | |   18ea26e4 Merge branch '20191114' into 'master' - zhangsan, 8 months ago\n|\\ \\ \\\n| * | | d03b6d09 (origin\u002F20191114) getKamiGoodsSpu - lisi, 8 months ago\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E多个提交出现了类似 “cacheLoader” 这样看起来莫名其妙的描述，过期的分支没有及时删除，多分支合并扰乱视线，整个记录看起来就像是一张「蜘蛛网」，如果要回溯一个业务功能的迭代过程，会让人很抓狂。\u003C\u002Fp\u003E\n\u003Cp\u003E仔细观察 Vue 的「git log」日志，不难发现它的的优点主要有四个：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003ECommit 描述清晰，第一个单词说明此次提交的类别，后续描述第一个单词以 \u003Cstrong\u003E\u003Cem\u003E动词\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E（一般现在时）开头；\u003C\u002Fstrong\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E整个记录随合并时间呈 \u003Cstrong\u003E\u003Cem\u003E单支线性\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E 向上累加，没有出现过期的，扰乱视线的分叉；\u003C\u002Fstrong\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E如果是 issue 相关，每个提交后面会紧跟 issue 的 hash tag（可选）；\u003C\u002Fli\u003E\n\u003Cli\u003E当需要发布版本时，以版本号打上 tag 标记（可选）；\u003C\u002Fli\u003E\n\u003Cli\u003E除了简短描述外，还有详细的描述（可选）；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E第三点到最后一点都是可选的，只要做到前面点就可以拥有一份整洁清晰的「git log」记录了，下面开始对实现这两点的方式进行探讨。\u003C\u002Fp\u003E\n\u003Ch2 id=\"xiancongtijiaogeshirushou\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'xiancongtijiaogeshirushou')\"\u003E¶\u003C\u002Fa\u003E 先从提交格式入手\u003C\u002Fh2\u003E\n\u003Cp\u003E那么 vue 是怎么做到提交格式这么规范统一的呢？作为多人协作的开源库，靠约定和人为自觉肯定是不现实的。打开 vue 项目的 package.json 可以发现几个关键的地方，vue 使用了\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fcommitizen\u002Fcz-cli\" target=\"_blank\"\u003E「commitizen」\u003C\u002Fa\u003E来代替「git commit」进行代码提交，使用\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fcommitizen\u002Fcz-conventional-changelog\" traget=\"_blank\"\u003E「cz-conventional-changelog」\u003C\u002Fa\u003E来指定「commitizen」的 Adapter。最后，在 git 的\u003Ca href=\"https:\u002F\u002Fgit-scm.com\u002Fbook\u002Fzh\u002Fv2\u002F%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90\" target=\"_blank\"\u003E「commit-msg」钩子\u003C\u002Fa\u003E指定了一个「commit」描述验证脚本\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fvuejs\u002Fvue\u002Fblob\u002Fdev\u002Fscripts\u002Fverify-commit-msg.js\" target=\"_blank\"\u003Everify-commit-msg.js\u003C\u002Fa\u003E，当脚本返回的值以非零值退出，就会提交失败，以一种强制的方式进行把关。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-json\"\u003E\u003Ccode class=\"language-json\"\u003E{\n  &quot;scripts&quot;: {\n    &quot;commit&quot;: &quot;git-cz&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;commitizen&quot;: &quot;^2.9.6&quot;,\n    &quot;conventional-changelog&quot;: &quot;^1.1.3&quot;,\n    &quot;cz-conventional-changelog&quot;: &quot;^2.0.0&quot;\n  },\n  &quot;gitHooks&quot;: {\n    &quot;commit-msg&quot;: &quot;node scripts\u002Fverify-commit-msg.js&quot;\n  },\n  &quot;config&quot;: {\n    &quot;commitizen&quot;: {\n      &quot;path&quot;: &quot;.\u002Fnode_modules\u002Fcz-conventional-changelog&quot;\n    }\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"Commitmessagedegeshi\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'Commitmessagedegeshi')\"\u003E¶\u003C\u002Fa\u003E Commit message 的格式\u003C\u002Fh3\u003E\n\u003Cp\u003E首先来说说格式的规范，目前社区有很多「Commit message」的写法规范，从 vue 的 package.json 使用的\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fcommitizen\u002Fcz-conventional-changelog\" traget=\"_blank\"\u003E「cz-conventional-changelog」\u003C\u002Fa\u003E可以得知，vue 使用的是\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fangular\u002Fangular.js\u002Fblob\u002Fmaster\u002FDEVELOPERS.md#-git-commit-guidelines\" target=\"_blank\"\u003EAngular 规范\u003C\u002Fa\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003EAngular 规范指定了「Commit message」包括三个部分：Header，Body 和 Footer。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-xml\"\u003E\u003Ccode class=\"language-xml\"\u003E&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n&lt;BLANK LINE&gt;\n&lt;body&gt;\n&lt;BLANK LINE&gt;\n&lt;footer&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch4 id=\"Header\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'Header')\"\u003E¶\u003C\u002Fa\u003E Header\u003C\u002Fh4\u003E\n\u003Cp\u003EHeader 部分只有一行，包括三个字段：\u003Ccode\u003Etype\u003C\u002Fcode\u003E（必需）、\u003Ccode\u003Escope\u003C\u002Fcode\u003E（可选）和\u003Ccode\u003Esubject\u003C\u002Fcode\u003E（必需）。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003E1.\u003Ccode\u003Etype\u003C\u002Fcode\u003E用于说明 commit 的类别，只允许使用下面 7 个标识:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E- feat：新功能（feature）\n- fix：修补bug\n- docs：文档（documentation）\n- style： 格式（不影响代码运行的变动）\n- refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n- perf: 性能优化\n- test：增加测试\n- chore：构建过程或辅助工具的变动\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003E2.\u003Ccode\u003Escope\u003C\u002Fcode\u003E用于说明此次提交影响的范围，比如数据层、控制层、视图层等等，视项目而定。\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003E3.\u003Ccode\u003Esubject\u003C\u002Fcode\u003E是 commit 目的的简短描述，不超过 \u003Cstrong\u003E\u003Cem\u003E100\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E 个字符。\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E- 以动词开头，使用第一人称现在时，比如change，而不是changed或changes\n- 第一个字母小写\n- 结尾不加句号（.）\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch4 id=\"Body\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'Body')\"\u003E¶\u003C\u002Fa\u003E Body\u003C\u002Fh4\u003E\n\u003Cp\u003EBody 部分是对本次 commit 的详细描述，可以分成多行。取一个 vue 的提交作为例子：\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"7-10,12-17\" class=\"language-bash\"\u003E\u003Ccode data-line=\"7-10,12-17\" class=\"language-bash\"\u003E* commit b9de23b1008b52deca7e7df40843e318a42f3f53\n| Author: Evan You &lt;yyx990803@gmail.com&gt;\n| Date:   Tue Feb 5 22:16:55 2019 -0500\n|\n|     fix: async component should use render owner as force update context\n|\n|     Previously, an async component uses its lexical owner as the force\n|     update context. This works when the async component is rendered in a\n|     scoped slot because in the past parent components always force update\n|     child components with any type of slots.\n|\n|     After the optimization in\n|     f219bed though, child components with only scoped slots are no longer\n|     force-updated, and this cause async components inside scoped slots to\n|     not trigger the proper update. Turns out they should have used the\n|     actual render owner (the component that invokes the scoped slot) as the\n|     force update context all along.\n|\n|     fix #9432\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E这里有几个注意的点：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E动词使用第一人称现在时，使用 fix, add, change 而不是 fixed, added, changed\u003C\u002Fli\u003E\n\u003Cli\u003E第二行是空行\u003C\u002Fli\u003E\n\u003Cli\u003E用换行来分割提交信息\u003C\u002Fli\u003E\n\u003Cli\u003E说明代码变动的动机，以及与以前行为的对比\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch4 id=\"Footer\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'Footer')\"\u003E¶\u003C\u002Fa\u003E Footer\u003C\u002Fh4\u003E\n\u003Cp\u003EFooter 部分可能会存在两种情况。\u003C\u002Fp\u003E\n\u003Ch6 id=\"1bujianrongbiandong\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'1bujianrongbiandong')\"\u003E¶\u003C\u002Fa\u003E 1.不兼容变动\u003C\u002Fh6\u003E\n\u003Cp\u003E如果当前代码与上一个版本不兼容，则 Footer 部分以\u003Ccode\u003EBREAKING CHANGE\u003C\u002Fcode\u003E开头，后面是对变动的描述、以及变动理由和迁移方法。\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"11\" class=\"language-bash\"\u003E\u003Ccode data-line=\"11\" class=\"language-bash\"\u003E* commit 8bbd337eab7d54c82327159c41ac975f805e28f5 (HEAD -&gt; master)\n| Author: CurtisLiong &lt;lkangd@gmail.com&gt;\n| Date:   Thu Jul 9 19:13:49 2020 +0800\n|\n|     feat(scope): here is a short description\n|\n|     here is the first paragraph.\n|\n|     here is the second paragraph.\n|\n|     BREAKING CHANGE: here is a description about breaking changes\n|\n|     fix #123\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch6 id=\"2guanbiIssue\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'2guanbiIssue')\"\u003E¶\u003C\u002Fa\u003E 2.关闭 Issue\u003C\u002Fh6\u003E\n\u003Cp\u003E如果当前 commit 针对某些 issue，那么可以在 Footer 部分关闭这些相关的 issue。\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"13\" class=\"language-bash\"\u003E\u003Ccode data-line=\"13\" class=\"language-bash\"\u003E* commit 8bbd337eab7d54c82327159c41ac975f805e28f5 (HEAD -&gt; master)\n| Author: CurtisLiong &lt;lkangd@gmail.com&gt;\n| Date:   Thu Jul 9 19:13:49 2020 +0800\n|\n|     feat(scope): here is a short description\n|\n|     here is the first paragraph.\n|\n|     here is the second paragraph.\n|\n|     BREAKING CHANGE: here is a description about breaking changes\n|\n|     fix #123, #456\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch4 id=\"teshuqingkuang\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'teshuqingkuang')\"\u003E¶\u003C\u002Fa\u003E 特殊情况\u003C\u002Fh4\u003E\n\u003Cp\u003E「cz-conventional-changelog」的实现对前面 Header 的\u003Ccode\u003Etype\u003C\u002Fcode\u003E部分增加了选项：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E- build：影响构建系统或外部依赖项的更改（如：gulp，webpack，npm）\n- ci：构建过程或辅助工具的变动\n- revert：恢复到之前的提交\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E其中使用 revert 时以\u003Ccode\u003ERevert\u003C\u002Fcode\u003E开头，后面跟着被撤销的 commit 的 Header，在 Footer 部分添加恢复的 commit 的 hash 号。\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"7\" class=\"language-bash\"\u003E\u003Ccode data-line=\"7\" class=\"language-bash\"\u003E* commit 80cc0a1f176f4eb6186d482e578a87af69b22b6d (HEAD -&gt; master)\n| Author: CurtisLiong &lt;lkangd@gmail.com&gt;\n| Date:   Thu Jul 9 19:42:57 2020 +0800\n|\n|     Revert &quot;feat(scope): here is a short description&quot;\n|\n|     This reverts commit 8bbd337eab7d54c82327159c41ac975f805e28f5.\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"shiyongtijiaofuzhugongju\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'shiyongtijiaofuzhugongju')\"\u003E¶\u003C\u002Fa\u003E 使用提交辅助工具\u003C\u002Fh3\u003E\n\u003Cp\u003E了解了规范之后，接下来就是用工具来帮助我们提交时严格执行规范。这里主要介绍「commitizen」的使用。\u003C\u002Fp\u003E\n\u003Ch4 id=\"Commitizen\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'Commitizen')\"\u003E¶\u003C\u002Fa\u003E Commitizen\u003C\u002Fh4\u003E\n\u003Cp\u003E先使用 npm 命令进行安装，可进行全局安装或者根据项目安装,\u003C\u002Fp\u003E\n\u003Cp\u003E全局安装：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E# 安装 commitizen 和 cz-conventional-changelog\nnpm i -g commitizen cz-conventional-changelog\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E在系统用户目录下创建.czrc 文件，并输入一下内容：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-json\"\u003E\u003Ccode class=\"language-json\"\u003E{ &quot;path&quot;: &quot;cz-conventional-changelog&quot; }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E项目安装：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E# 安装 commitizen 和 cz-conventional-changelog\nnpm i commitizen cz-conventional-changelog -D\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E然后在项目目录中的 package.json 文件内配置以下内容：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-json\"\u003E\u003Ccode class=\"language-json\"\u003E{\n  &quot;scripts&quot;: {\n    &quot;commit&quot;: &quot;git-cz&quot;\n  },\n  &quot;config&quot;: {\n    &quot;commitizen&quot;: {\n      &quot;path&quot;: &quot;.\u002Fnode_modules\u002Fcz-conventional-changelog&quot;\n    }\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E提交的时候使用\u003Ccode\u003Egit cz\u003C\u002Fcode\u003E（全局）或者\u003Ccode\u003Enpm run commit\u003C\u002Fcode\u003E（项目）来代替\u003Ccode\u003Egit commit\u003C\u002Fcode\u003E，效果如下：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"_nuxt\u002Fimg\u002Fpic-git-commitizen.b98d059.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E「commitizen」提供了一个交互式的 git 提交流程，保证了提交者不会因为一时疏忽而做出违反规范的提交行为。\u003C\u002Fp\u003E\n\u003Ch3 id=\"qiangzhixiaoyantijiaogeshi\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'qiangzhixiaoyantijiaogeshi')\"\u003E¶\u003C\u002Fa\u003E 强制校验提交格式\u003C\u002Fh3\u003E\n\u003Cp\u003E上面提到 vue 会在「commit-msg」钩子校验提交格式是否合格。如果你也想更进一步，可以使用\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fconventional-changelog\u002Fcommitlint#readme\" target=\"_blank\"\u003E「commitlint」\u003C\u002Fa\u003E结合 \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Ftypicode\u002Fhusky#readme\" target=\"_blank\"\u003E「husky」\u003C\u002Fa\u003E来进行强制校验提交格式。\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E安装依赖：\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003Enpm i @commitlint\u002Fcli @commitlint\u002Fconfig-conventional husky -D\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Col start=\"2\"\u003E\n\u003Cli\u003E在项目根目录创建 commitlint 配置文件：commitlint.config.js：\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Emodule.exports = {\n  extends: ['@commitlint\u002Fconfig-conventional'], \u002F\u002F @commitlint\u002Fconfig-conventional Angular 规范\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Col start=\"3\"\u003E\n\u003Cli\u003E在项目根目录创建 husky 配置文件：husky.config.js：\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Emodule.exports = {\n  hooks: {\n    'commit-msg': 'commitlint -E HUSKY_GIT_PARAMS', \u002F\u002F 在 commit-msg 钩子校验提交格式\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch2 id=\"guifanhebingtuisongliucheng\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'guifanhebingtuisongliucheng')\"\u003E¶\u003C\u002Fa\u003E 规范合并推送流程\u003C\u002Fh2\u003E\n\u003Cp\u003E解决了「commit」格式规范的问题之后，接下来就是分支合并的事情了。一般情况下，开发者在本地进行新需求的开发或者 bug 修复之后，需要合并分支到测试分支或者远端主分支。常规会进行一下命令：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E~\u002FFE-Project\u002Fgit-test&gt;git branch # 查看当前分支\n* feature-some\n  master\n~\u002FFE-Project\u002Fgit-test&gt;git checkout master # 切换到 master 分支\n~\u002FFE-Project\u002Fgit-test&gt;git merge feature-some # 合并功能分支，此时可能需要解决冲突\n~\u002FFE-Project\u002Fgit-test&gt;git pull # 拉取最新的远端主分支代码，此时可能需要解决冲突\n~\u002FFE-Project\u002Fgit-test&gt;git push # 推送分支，此时如果又有人更新代码的话，需要重新拉取解决冲突后才能推送\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E此时，按照 git 的默认策略，如果远程分支和本地分支之间的提交线图有分叉的话（即不是 fast-forwarded），git 会执行一次 merge 操作，因此产生一次没意义的提交记录，从而产生了下面所示的混乱。\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"2\" class=\"language-bash\"\u003E\u003Ccode data-line=\"2\" class=\"language-bash\"\u003E| * | | | | | | e63cdb7f htmlPlugin baseConf 中引入 - lisi, 8 months ago\n| * | | | | | |   d6481470 Merge remote-tracking branch 'origin\u002Fmaster' into build-merge - lisi, 8 months ago\n| |\\ \\ \\ \\ \\ \\ \\\n| * | | | | | | | 551b601b 商品详情富文本图片懒加载 - lisi, 8 months ago\n| * | | | | | | |   804b8589 Merge branch 'master' into build-merge - lisi, 8 months ago\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E产生这个原因的本质原因是，\u003Ccode\u003Egit pull\u003C\u002Fcode\u003E命令其实是一个组合命令，在你敲下回车时，这个命令会依次执行两个命令：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003Egit fetch # 拉取远程代码\ngit merge # 将远程分支与本地分支合并\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E用线图表示就像是这样的，其中\u003Ccode\u003EF'\u003C\u002Fcode\u003E就是类似\u003Ccode\u003EMerge remote-tracking branch 'origin\u002Fmaster' into ...\u003C\u002Fcode\u003E的记录：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E# after feature-some committed\nA---B---C origin\u002Fmaster\n\nA---B master\n     \\\n      D---E feature-some\n\n# after feature-some merge to master\nA---B---C origin\u002Fmaster\n\nA---B---D---E master\n     \\\n      D---E feature-some\n\n# after master pull\n      A---B---C origin\u002Fmaster\n         \u002F     \\\nA---B---D---E---F master\n     \\\n      D---E feature-some\n\n# after master push\n      A---B---C---F' origin\u002Fmaster\n         \u002F       \u002F\nA---B---D---E---F master\n     \\\n      D---E feature-some\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3 id=\"shiyongrebasehebing\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'shiyongrebasehebing')\"\u003E¶\u003C\u002Fa\u003E 使用 rebase 合并\u003C\u002Fh3\u003E\n\u003Cp\u003E要解决这样的问题，唯一的做法就是使用\u003Ca href=\"https:\u002F\u002Fgit-scm.com\u002Fbook\u002Fzh\u002Fv2\u002FGit-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA\" target=\"_blank\"\u003E\u003Ccode\u003E变基\u003C\u002Fcode\u003E\u003C\u002Fa\u003E，也就是\u003Ccode\u003Erebase\u003C\u002Fcode\u003E来进行分支合并，使用变基分两种情况：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003E1.拉取时变基合并\u003C\u002Fstrong\u003E\u003Cbr\u003E\n依旧是运行上面一系列命令，但是在「git pull」的时候加上「--rebase」选项：\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"6\" class=\"language-bash\"\u003E\u003Ccode data-line=\"6\" class=\"language-bash\"\u003E~\u002FFE-Project\u002Fgit-test&gt;git branch # 查看当前分支\n* feature-some\n  master\n~\u002FFE-Project\u002Fgit-test&gt;git checkout master # 切换到 master 分支\n~\u002FFE-Project\u002Fgit-test&gt;git merge feature-some # 合并功能分支，此时可能需要解决冲突\n~\u002FFE-Project\u002Fgit-test&gt;git pull --rebase # 拉取最新的远端主分支代码，使用“--rebase”选项，此时可能需要解决冲突\n~\u002FFE-Project\u002Fgit-test&gt;git push # 推送分支，此时如果又有人更新代码的话，需要重新拉取解决冲突后才能推送\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E这个时候 master 分支看起来就是线性的了：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E# after feature-some committed\nA---B---C origin\u002Fmaster\n\nA---B master\n     \\\n      D---E feature-some\n\n# after feature-some merge to master\nA---B---C origin\u002Fmaster\n\nA---B---D---E master\n     \\\n      D---E feature-some\n\n# after master pull --rebase\nA---B---C origin\u002Fmaster\n\nA---B---C---D'---E' master\n         \\\n          D---E feature-some\n\n# after master push\nA---B---C---D'---E' origin\u002Fmaster\n\nA---B---C---D'---E' master\n         \\\n          D---E feature-some\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003E2.拉取后变基合并\u003C\u002Fstrong\u003E\u003Cbr\u003E\n这个做法步骤会更多，操作顺序是先更新本地「master」分支，然后在「feature-some」分支以更新完最新状态的本地「master」分支为基点进行变基，解决完冲突后再合并回本地「master」分支进行推送：\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"7\" class=\"language-bash\"\u003E\u003Ccode data-line=\"7\" class=\"language-bash\"\u003E~\u002FFE-Project\u002Fgit-test&gt;git branch # 查看当前分支\n* feature-some\n  master\n~\u002FFE-Project\u002Fgit-test&gt;git checkout master # 切换到 master 分支\n~\u002FFE-Project\u002Fgit-test&gt;git pull # 拉取最新的远端主分支代码\n~\u002FFE-Project\u002Fgit-test&gt;git checkout feature-some # 切换到 feature-some 分支\n~\u002FFE-Project\u002Fgit-test&gt;git rebase master #  对 feature-some 分支以 master 分支为目标变基，此时可能需要解决冲突\n~\u002FFE-Project\u002Fgit-test&gt;git checkout master # 切换到 master 分支\n~\u002FFE-Project\u002Fgit-test&gt;git merge feature-some # 合并功能分支\n~\u002FFE-Project\u002Fgit-test&gt;git push # 推送分支，此时如果又有人更新代码的话，需要重新拉取解决冲突后才能推送\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E流程分析结果：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E# after feature-some committed\nA---B---C origin\u002Fmaster\n\nA---B master\n     \\\n      D---E feature-some\n\n# after master pull\nA---B---C origin\u002Fmaster\n\nA---B---C master\n     \\\n      D---E feature-some\n\n# after feature-some rebase from master\nA---B---C origin\u002Fmaster\n\nA---B---C master\n         \\\n          D'---E' feature-some\n\n# after feature-some merge to master\nA---B---C origin\u002Fmaster\n\nA---B---C---D'---E' master\n         \\\n          D'---E' feature-some\n\n# after master push\nA---B---C---D'---E' origin\u002Fmaster\n\nA---B---C---D'---E' master\n         \\\n          D'---E' feature-some\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E推荐使用第二种做法，因为你不知道从远程分支拉取过来的代码会出现怎样的情况，当出现大量冲突时，处理起来比较棘手。相对来说，第二种做法更加可控，而且在切换回「master」分支去拉取代码之前，可以使用「git stash」进行代码的\u003Ca href=\"https:\u002F\u002Fgit-scm.com\u002Fbook\u002Fzh\u002Fv2\u002FGit-%E5%B7%A5%E5%85%B7-%E8%B4%AE%E8%97%8F%E4%B8%8E%E6%B8%85%E7%90%86\" target=\"_blank\"\u003E贮藏\u003C\u002Fa\u003E，贮藏之后的代码肯定是干净的，且和 「master」拉取前的状态是同步的，所以此时「git rebase master」不会有任何冲突。这时在「feature-some」分支应用刚刚的贮藏就可以达到上面同样的效果，此时如果有冲突的话还是需要解决，但是你可以根据冲突的原因决定是否修改你新增的代码或者预想的提交信息，这是一种更加灵活可控的方法。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003E~\u002FFE-Project\u002Fgit-test&gt;git branch # 查看当前分支\n* feature-some\n  master\n~\u002FFE-Project\u002Fgit-test&gt;git add . # 添加所有变动文件到暂存区\n~\u002FFE-Project\u002Fgit-test&gt;git stash # 贮藏暂存区的所有文件\n~\u002FFE-Project\u002Fgit-test&gt;git checkout master # 切换到 master 分支\n~\u002FFE-Project\u002Fgit-test&gt;git pull # 拉取最新的远端主分支代码\n~\u002FFE-Project\u002Fgit-test&gt;git checkout feature-some # 切换到 feature-some 分支\n~\u002FFE-Project\u002Fgit-test&gt;git rebase master #  对 feature-some 分支以 master 分支为目标变基，此时可能需要解决冲突\n~\u002FFE-Project\u002Fgit-test&gt;git stash pop # 应用贮藏\n~\u002FFE-Project\u002Fgit-test&gt;npm run commit # commit 提交\n~\u002FFE-Project\u002Fgit-test&gt;git checkout master # 切换到 master 分支\n~\u002FFE-Project\u002Fgit-test&gt;git merge feature-some # 合并功能分支\n~\u002FFE-Project\u002Fgit-test&gt;git push # 推送分支，此时如果又有人更新代码的话，需要重新拉取解决冲突后才能推送\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch4 id=\"hebingqianxiugaiCommit\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'hebingqianxiugaiCommit')\"\u003E¶\u003C\u002Fa\u003E 合并前修改 Commit\u003C\u002Fh4\u003E\n\u003Cp\u003E圣人千虑，必有一失，就算熟读了规范，应用了工具帮助「commit」，也总会出现需要修改「commit」的时候，比如：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E「commit」的类型\u002F描述\u002Fissue 填写(选)错了；\u003C\u002Fli\u003E\n\u003Cli\u003E「commit」了之后才发现添加少了文件；\u003C\u002Fli\u003E\n\u003Cli\u003E多个「commit」其实加起来都只实现了一个功能；\u003C\u002Fli\u003E\n\u003Cli\u003E因为有紧急 bug 需要处理而必须先搁置当前正在开发的代码而又不想使用贮藏；\u003C\u002Fli\u003E\n\u003Cli\u003E...\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E什么情况都有可能发生，这些常见突发状况可以总结为一下三种类型，对应的处理方法一并给出。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003E1.只修改「commit」信息：\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"3\" class=\"language-bash\"\u003E\u003Ccode data-line=\"3\" class=\"language-bash\"\u003E# 再次执行 commit 命令同时添加“--amend”指令\n~\u002FFE-Project\u002Fgit-test&gt;git commit --amend\nfix: bug fix readme\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Fri Jul 10 00:33:23 2020 +0800\n#\n# On branch feature-some\n# Changes to be committed:\n#       modified:   README.md\n#\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E出现这个界面直接用 vi 的方式修改「commit」信息，然后用\u003Ccode\u003E:wq\u003C\u002Fcode\u003E命令保存退出就可以了。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003E2.需要「commit」的文件少了：\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"3\" class=\"language-bash\"\u003E\u003Ccode data-line=\"3\" class=\"language-bash\"\u003E# 这种情况和上面是类似的，但是在执行“git commit --amend”前先把文件添加到暂存区\n~\u002FFE-Project\u002Fgit-test&gt;touch additional.js # 模拟新增文件\n~\u002FFE-Project\u002Fgit-test&gt;echo 'some code' &gt; additional.js # 模拟新增代码\n~\u002FFE-Project\u002Fgit-test&gt;git add additional.js # 添加遗漏的文件到暂存区\n~\u002FFE-Project\u002Fgit-test&gt;git commit --amend\nfix: bug fix readme\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Fri Jul 10 00:33:23 2020 +0800\n#\n# On branch feature-some\n# Changes to be committed:\n#       modified:   README.md\n#\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003E3.合并多个「commit」记录：\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"3-5\" class=\"language-bash\"\u003E\u003Ccode data-line=\"3-5\" class=\"language-bash\"\u003E# 使用“git rebase -i”命令来进行多个提交的修改，这时候可以看到三个提交信息以「从旧到新，从上往下」的方式进行分行显示\n~\u002FFE-Project\u002Fgit-test&gt;git rebase -i HEAD~3 # 修改最后三个「commit」记录\npick 3c280ae revert(scope): short\npick 80cc0a1 Revert &quot;feat(scope): here is a short description&quot;\npick ea97323 fix: bug fix readme\n\n# Rebase 8bbd337..ea97323 onto 8bbd337 (3 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like &quot;squash&quot;, but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E需要合并三个「commit」的话，需要将第二三行的「pick」修改为「squash」，使用\u003Ccode\u003E:wq\u003C\u002Fcode\u003E保存退出,\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"1-3\" class=\"language-bash\"\u003E\u003Ccode data-line=\"1-3\" class=\"language-bash\"\u003Epick 3c280ae revert(scope): short\nsquash 80cc0a1 Revert &quot;feat(scope): here is a short description&quot;\nsquash ea97323 fix: bug fix readme and some additional operation\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Egit 应用所有的三次修改然后将你放到编辑器中来合并三次提交信息：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-bash\"\u003E\u003Ccode class=\"language-bash\"\u003Efeat: short\n\nlong\n\nBREAKING CHANGE: beaking\n\nfix #123\n\nfeat(scope): here is a short description\n\nhere is the first paragraph\n\nBREAKING CHANGE: here is a description about breaking changes\n\nfix #123\n\nrevert(scope): short\n\nlong\n\nRevert &quot;feat(scope): here is a short description&quot;\n\nThis reverts commit 8bbd337eab7d54c82327159c41ac975f805e28f5.\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Thu Jul 9 17:58:06 2020 +0800\n#\n# interactive rebase in progress; onto 99a56e3\n# Last command done (1 command done):\n#    squash 267e38a feat: test\n# Next command to do (1 remaining command):\n#    reword 496f422 fix: bug fix readme heiheihei\n# You are currently rebasing branch 'feature-some' on '99a56e3'.\n#\n# Changes to be committed:\n#       modified:   README.md\n#\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E当你保存之后，你就拥有了一个包含前三次提交的全部变更的提交。\u003C\u002Fp\u003E\n\u003Cp\u003E关于「git rebase -i HEAD~[number]」的操作还有很多，比如它也可以做到重写「commit」信息、调整多个「commit」的先后顺序、拆分提交等等，篇幅有限，这里不再展开，如果有兴趣的话请狠狠点击\u003Ca href=\"https:\u002F\u002Fgit-scm.com\u002Fbook\u002Fzh\u002Fv2\u002FGit-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2\" target=\"_blank\"\u003E这里\u003C\u002Fa\u003E学习。\u003C\u002Fp\u003E\n\u003Ch4 id=\"zhuyi\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'zhuyi')\"\u003E¶\u003C\u002Fa\u003E 注意！\u003C\u002Fh4\u003E\n\u003Cp\u003E以上操作只能在本地分支的「commit」没有合并到远程分支前执行，所有与远程分支同步的「commit」都不可随意修改或合并，否者会给你的合作者带来各种神奇的麻烦，如果你一意孤行且敲下了罪恶的「git push --force」，你将会被世人所不齿，被人们所唾弃。三思。\u003C\u002Fp\u003E\n\u003Ch3 id=\"yuanchengmasterfenzhiquanxiankongzhi\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'yuanchengmasterfenzhiquanxiankongzhi')\"\u003E¶\u003C\u002Fa\u003E 远程 master 分支权限控制\u003C\u002Fh3\u003E\n\u003Cp\u003E远程主分支和发布分支应该进严格的权限控制，只允许 master （管理员）的角色进行 commit 的合并，这些角色通常由小组负责人或项目负责人担任。其他代码贡献者（同事）设置为「developer」或其他对这些主要分支只有 \u003Cstrong\u003E\u003Cem\u003E访问\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E 权限的角色。常用的 gitlab 设置如下图：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"_nuxt\u002Fimg\u002Fpic-git-lab-setting.6bb57c6.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E团队成员应该严格遵循团队内的「git workflow」（如果有的话），所有新需求或 bug 修复都应该在本地分支进行开发，开发完成后提交到测试分支或者远端「dev」分支，测试通过后，再由 master 角色的进行主要分支的合并。\u003C\u002Fp\u003E\n\u003Ch3 id=\"helifencha\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'helifencha')\"\u003E¶\u003C\u002Fa\u003E 合理分叉\u003C\u002Fh3\u003E\n\u003Cp\u003E当然，以千万级使用量的开源库来对我们平时进行业务开发的代码库进行硬性要求，难免存在不合理性，脱离了业务的开源库的每个提交都是基于新增功能或者修复 bug 性质的，而业务开发更多时候是伴随着一个「功能模块」进行开发测试的。\u003C\u002Fp\u003E\n\u003Cp\u003E比如业务需求增加了「积分」这一模块，这个「积分」模块可能涉及到多个功能模块的修改或者新增了一部分公共模块，这个时候如果还是「一条直线」的「git log」记录反而显得不那么清晰了。那么这时候可以使用「git merge --no-ff [branch-name]」命令来可以取消 git 默认的 「fast-forwarded」行为，进而刻意地创建一个「merge」类型的「commit」。\u003C\u002Fp\u003E\n\u003Cp\u003E情景分析：在接到「积分」模块开发任务的时候，首先基于「master」创建一条「points-module」分支。在开发并提交了三个「feature points」相关功能后，发现需要修改「feature-1」的 bug 以适应积分模块。当整个模块测试完成需要合并到「master」的时候，切换到「master」，执行「git merge --no-ff points-module」命令来进行合并，此时输入「add points module」来作为提交信息。\u003C\u002Fp\u003E\n\u003Cp\u003E结果如下所示：\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"1\" class=\"language-bash\"\u003E\u003Ccode data-line=\"1\" class=\"language-bash\"\u003E*   a1915ff (HEAD -&gt; master)  add points module - CurtisLiong, 2 minutes ago\n|\\\n| * af0b028 fix(feature-1.js): fix bug to adapt feature points - CurtisLiong, 4 minutes ago\n| * 5ca19a9 feat(feature-points-3.js): add feature points 3 - CurtisLiong, 7 minutes ago\n| * 8a85062 feat(feature-points-2.js): add feature points 2 - CurtisLiong, 8 minutes ago\n| * 87ae897 feat(feature-points-1.js): add feature points 1 - CurtisLiong, 8 minutes ago\n|\u002F\n* 78c6ff0 feat(feature-1.js): add feature 1 - CurtisLiong, 13 minutes ago\n* 37d2d11 feat(whole project): project init - CurtisLiong, 14 minutes ago\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E这样在回溯「积分」这个模块的开发过程的时候，就可以快速分辨出那些提交是属于「积分」这个模块的。\u003C\u002Fp\u003E\n\u003Chr\u003E\n\u003Ch2 id=\"jieyan\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'jieyan')\"\u003E¶\u003C\u002Fa\u003E 结言\u003C\u002Fh2\u003E\n\u003Cp\u003E一套酣畅淋漓的打法下来，规范提交「commit」的姿势相信你已经掌握得七七八八。\u003C\u002Fp\u003E\n\u003Cp\u003E规范整洁的「git log」记录不仅可以给项目增加严谨性，还可以给项目带来快速方便回溯的好处，与此同时，也体现了我们作为编码工作者的专业性。\u003C\u002Fp\u003E\n\u003Cp\u003E如果你对上面使用到的 git 相关命令不熟悉的话，请飞速前往\u003Ca href=\"https:\u002F\u002Fgit-scm.com\u002Fbook\u002Fzh\u002Fv2\" target=\"_blank\"\u003Egit pro\u003C\u002Fa\u003E学习，为了你的同事，也为了你自己，请务必增强自己的 git 技能。\u003C\u002Fp\u003E\n",bodyBegin:8,frontmatter:"title: 何为「Git Commit」最佳姿势？\ndate: '2020-05-15'\nspoiler: 让你的每一个「Git Commit」更有价值，而不是形式主义下的流水账\nfeatured: true",link:a,next:{title:"代码整洁之道：JS 中的 S.O.L.I.D 原则",date:"2019-11-11",spoiler:"【译】Clean Code concepts adapted for JavaScript：S.O.L.I.D",link:"\u002Fpost\u002Fjs-solid-principle\u002F",min2read:"☕️☕️ 11 min read",wordcount:"2.5k"},prev:{title:"Design Patterns In Javascript",date:"2019-09-03",spoiler:"总结常用设计模式在 Javascript 中的实现",link:"\u002Fpost\u002Fdesign-patterns-in-javascript\u002F",min2read:"🍱🍱 31 min read",wordcount:"7.6k"}}}],fetch:[],mutations:void 0}}("\u002Fpost\u002Fdevelop-good-git-commit-habits\u002F")));