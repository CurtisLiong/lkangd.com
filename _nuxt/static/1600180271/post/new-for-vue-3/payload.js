__NUXT_JSONP__("/post/new-for-vue-3", (function(a){return {data:[{post:{attributes:{title:"一文看全 Vue 3.X 带来的新变化",date:"2020-07-19",spoiler:"只关注区别于 Vue 2.x 实现，助力快速过渡到 Vue 3.x",link:a,min2read:"🍱🍱🍱 39 min read",wordcount:"8.4k"},body:"\u003Cp\u003E\u003Cdiv class=\"cs-toc-dom\"\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"#NEWxinzenggongnengtexing\"\u003ENEW | 新增功能特性\u003C\u002Fa\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"#jichuxiangyingshiAPIReactivity\"\u003E基础响应式 API Reactivity\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#Refs\"\u003ERefs\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#Computed\"\u003EComputed\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#WatchEffect\"\u003EWatchEffect\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#Watch\"\u003EWatch\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#setup\"\u003Esetup\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#setupzhuanyongshengmingzhouqigouzi\"\u003Esetup 专用生命周期钩子\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#Teleport\"\u003ETeleport\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#duogenyuansuFragmentsmultirootnode\"\u003E多根元素 Fragments(multi-root node)\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#Suspense\"\u003ESuspense\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#zidingyishijianEvents\"\u003E自定义事件 Events\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#zidingyixuanranqiRenderer\"\u003E自定义渲染器 Renderer\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#BREAKINGpohuaixinggenggai\"\u003EBREAKING | 破坏性更改\u003C\u002Fa\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"#quanjuAPIGlobal\"\u003E全局 API Global\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#shuangxiangbangdingvmodel\"\u003E双向绑定 v-model\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#xuanranhanshuAPIRender\"\u003E渲染函数 API Render\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#hanshushizujianFunctionalComponent\"\u003E函数式组件 Functional Component\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#yibuzujianAsyncComponent\"\u003E异步组件 Async Component\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#Dataxuanxiang\"\u003EData 选项\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#zidingyiyuansuElements\"\u003E自定义元素 Elements\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#chacaoSlots\"\u003E插槽 Slots\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#dongtaibangdingshuxingchuli\"\u003E动态绑定属性处理\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#zidingyizhilingDirectives\"\u003E自定义指令 Directives\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#donghuazujianTransitionComponent\"\u003E动画组件 Transition Component\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#zhentingqiAPIWatch\"\u003E侦听器 API Watch\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#xiangyingshizhuruProvideInject\"\u003E响应式注入 Provide \u002F Inject\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#REMOVEDfeiqigongnengtexing\"\u003EREMOVED | 废弃功能特性\u003C\u002Fa\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"#shijianAPIEvents\"\u003E事件 API Events\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#shijianxiushifuKeyCode\"\u003E事件修饰符 KeyCode\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#guolvqiFilters\"\u003E过滤器 Filters\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#hangneimobanshuxinginlinetemplate\"\u003E行内模板属性 inline-template\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Ca href=\"#zongjie\"\u003E总结\u003C\u002Fa\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003C\u002Fdiv\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E昨天(2020-07-18)，Vue 宣布 3.X 版本正式进入 \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fvuejs\u002Frfcs\u002Fissues\u002F189\" target=\"_blank\"\u003ERC\u003C\u002Fa\u003E阶段，进入 RC 阶段意味着 Vue 3.x 的核心实现已经趋于稳定，原则上在最终发布前不会再引入新的主要特性和破坏性更改，所以现在正是开始学习 Vue 3.x 的最好时机。\u003C\u002Fp\u003E\n\u003Cp\u003E在通读了 Vue 3.x 最新的\u003Ca href=\"https:\u002F\u002Fv3.vuejs.org\u002F\" target=\"_blank\"\u003E官方文档\u003C\u002Fa\u003E后，我总结了一下 Vue 3.x 对于 Vue 2.x 的一些主要变化，分别从新功能、破坏性更改和废弃特性三个方面进行汇总，方便在开发基于 Vue 3.x 新版本应用的时候进行快速查阅。可点击右侧 TOC 导航栏进行快速查看（PC 端）。\u003C\u002Fp\u003E\n\u003Ch2 id=\"NEWxinzenggongnengtexing\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'NEWxinzenggongnengtexing')\"\u003E¶\u003C\u002Fa\u003E NEW | 新增功能特性\u003C\u002Fh2\u003E\n\u003Ch3 id=\"jichuxiangyingshiAPIReactivity\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'jichuxiangyingshiAPIReactivity')\"\u003E¶\u003C\u002Fa\u003E 基础响应式 API Reactivity\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E新增\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E全局 API，调用后返回一个响应式的\u003Ccode\u003Eproxy\u003C\u002Fcode\u003E对象；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E全局 API，调用后根据源对象返回一个只读的\u003Ccode\u003Eproxy\u003C\u002Fcode\u003E对象，如果源对象是响应式的，源对象发生变化时会同步变化；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003EisProxy\u003C\u002Fcode\u003E全局 API，检查指定对象是否由\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E或者\u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E创建；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003EisReactive\u003C\u002Fcode\u003E全局 API，检查指定对象是否由\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E创建（经\u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E创建的\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E值认为 true，e.g.，isReactive(readonly(reactive({}))) === true）；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003EisReadonly\u003C\u002Fcode\u003E全局 API，检查指定对象是否由\u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E创建；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003EtoRaw\u003C\u002Fcode\u003E全局 API，调用后返回一个\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E对象的原始对象；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003EmarkRaw\u003C\u002Fcode\u003E全局 API，调用后返回一个不可被\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E将其作为源的对象；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003EshallowReactive\u003C\u002Fcode\u003E全局 API，浅\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E，只将对象的顶层\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003EshallowReadonly\u003C\u002Fcode\u003E全局 API，浅\u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E，只将对象的顶层\u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimashili\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimashili')\"\u003E¶\u003C\u002Fa\u003E 代码示例：\u003C\u002Fh5\u003E\n\u003Cp\u003E\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E调用后返回一个响应式的\u003Ccode\u003Eproxy\u003C\u002Fcode\u003E对象。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst obj = reactive({ count: 0 });\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E调用后根据源对象返回一个只读的\u003Ccode\u003Eproxy\u003C\u002Fcode\u003E对象，如果源对象是响应式的，源对象发生变化时会同步变化。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst original = reactive({ count: 0 });\n\nconst copy = readonly(original);\n\nwatchEffect(() =&gt; {\n  \u002F\u002F works for reactivity tracking\n  console.log(copy.count);\n});\n\n\u002F\u002F mutating original will trigger watchers relying on the copy\noriginal.count++;\n\n\u002F\u002F mutating the copy will fail and result in a warning\ncopy.count++; \u002F\u002F warning!\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003EisProxy\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E检查指定对象是否由\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E或者\u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E创建。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst rt = reactive({ count: 0 });\nconst rd = readonly(rt);\nconst plainObj = {};\n\nisProxy(rt); \u002F\u002F true\nisProxy(rd); \u002F\u002F true\nisProxy(plainObj); \u002F\u002F false\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003EisReactive\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E检查指定对象是否由\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E创建（经\u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E创建的\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E值认为 true，e.g.，isReactive(readonly(reactive({}))) === true）。\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"7-15\" class=\"language-js\"\u003E\u003Ccode data-line=\"7-15\" class=\"language-js\"\u003Eimport { reactive, isReactive, readonly } from 'vue';\nexport default {\n  setup() {\n    const state = reactive({\n      name: 'John',\n    });\n    \u002F\u002F 由普通对象创建的 readonly proxy\n    const plain = readonly({\n      name: 'Mary',\n    });\n    console.log(isReactive(plain)); \u002F\u002F -&gt; false\n\n    \u002F\u002F 由 reactive proxy 创建的 readonly proxy\n    const stateCopy = readonly(state);\n    console.log(isReactive(stateCopy)); \u002F\u002F -&gt; true\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003EisReadonly\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E检查指定对象是否由\u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E创建。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst rt = reactive({ count: 0 });\nconst rd = readonly(rt);\nconst plainObj = {};\n\nisReadonly(rt); \u002F\u002F false\nisReadonly(rd); \u002F\u002F true\nisReadonly(plainObj); \u002F\u002F false\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003EtoRaw\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E调用后返回一个\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E对象的原始对象。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst foo = {};\nconst reactiveFoo = reactive(foo);\n\nconsole.log(toRaw(reactiveFoo) === foo); \u002F\u002F true\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003EmarkRaw\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E调用后返回一个不可被\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E将其作为源的对象。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst foo = markRaw({});\nconsole.log(isReactive(reactive(foo))); \u002F\u002F false\n\n\u002F\u002F 嵌套 reactive 也可使用\nconst bar = reactive({ foo });\nconsole.log(isReactive(bar.foo)); \u002F\u002F false\n\n\u002F\u002F 被 markRaw 对象的嵌套对象不受影响\nconst baz = markRaw({\n  nested: {},\n});\nconst qux = reactive({\n  \u002F\u002F 即使 `baz` 被标记为 raw, 但是 baz.nested 不受影响.\n  nested: baz.nested,\n});\n\nconsole.log(baz.nested === qux.nested); \u002F\u002F false\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003EshallowReactive\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E浅\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E，只将对象的顶层\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst state = shallowReactive({\n  foo: 1,\n  nested: {\n    bar: 2,\n  },\n});\n\n\u002F\u002F 改变 state 自身的属性是响应式的\nstate.foo++;\n\u002F\u002F ...但是深层嵌套对象不是响应式的\nisReactive(state.nested); \u002F\u002F false\nstate.nested.bar++; \u002F\u002F non-reactive\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003EshallowReadonly\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E浅\u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E，只将对象的顶层\u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst state = shallowReadonly({\n  foo: 1,\n  nested: {\n    bar: 2,\n  },\n});\n\n\u002F\u002F 不可以改变 state 自身的属性值\nstate.foo++;\n\u002F\u002F ...但是深层嵌套对象的属性值可被改变\nisReadonly(state.nested); \u002F\u002F false\nstate.nested.bar++; \u002F\u002F works\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"Refs\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'Refs')\"\u003E¶\u003C\u002Fa\u003E Refs\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-2\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-2')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E新增\u003Ccode\u003Eref\u003C\u002Fcode\u003E全局 API，调用后返回一个基础值的响应式对象，该对象只有一个 value 固定值。当源值不是基础值（即对象）时，会静默地对该对象调用\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003Eunref\u003C\u002Fcode\u003E全局 API，调用后返回一个\u003Ccode\u003Eref\u003C\u002Fcode\u003E值的 value 值，这个 API 是\u003Ccode\u003Eval = isRef(val) ? val.value : val\u003C\u002Fcode\u003E的语法糖；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003EtoRef\u003C\u002Fcode\u003E全局 API，调用后返回一个\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E对象的指定属性作为\u003Ccode\u003Eref\u003C\u002Fcode\u003E，该\u003Ccode\u003Eref\u003C\u002Fcode\u003E与\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E的原值互相影响；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003EtoRefs\u003C\u002Fcode\u003E全局 API，调用后返回一个\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E对象的所有属性的\u003Ccode\u003Eref\u003C\u002Fcode\u003E集合，该\u003Ccode\u003Eref\u003C\u002Fcode\u003E集合的每一个属性值（即每一个 ref）与\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E的原值相互影响；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003EisRef\u003C\u002Fcode\u003E全局 API，检查指定对象是否\u003Ccode\u003Eref\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003EcustomRef\u003C\u002Fcode\u003E全局 API，创建自定义的\u003Ccode\u003Eref\u003C\u002Fcode\u003E用于细粒度的控制依赖收集和触发，需要提供一个工厂函数，该工厂函数接受参数分别为\u003Ccode\u003Etrack\u003C\u002Fcode\u003E和\u003Ccode\u003Etrigger\u003C\u002Fcode\u003E两个参数，返回值必须是带\u003Ccode\u003Eget\u003C\u002Fcode\u003E、\u003Ccode\u003Eset\u003C\u002Fcode\u003E方法的对象；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003EshallowRef\u003C\u002Fcode\u003E全局 API，浅\u003Ccode\u003Eref\u003C\u002Fcode\u003E，因为对非基础值调用\u003Ccode\u003Eref\u003C\u002Fcode\u003E会隐式调用\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E，相当于对\u003Ccode\u003Eref\u003C\u002Fcode\u003E的 value 值调用\u003Ccode\u003EshallowReactive\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003Cli\u003E新增\u003Ccode\u003EtriggerRef\u003C\u002Fcode\u003E全局 API，改变由\u003Ccode\u003EshallowRef\u003C\u002Fcode\u003E创建的\u003Ccode\u003Eref\u003C\u002Fcode\u003E值后，手动触发\u003Ccode\u003Eref\u003C\u002Fcode\u003E更新以驱动\u003Ccode\u003Ecomputed\u003C\u002Fcode\u003E和\u003Ccode\u003Ewatch\u003C\u002Fcode\u003E等逻辑；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimashili-2\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimashili-2')\"\u003E¶\u003C\u002Fa\u003E 代码示例：\u003C\u002Fh5\u003E\n\u003Cp\u003E\u003Ccode\u003Eref\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E调用后返回一个基础值的响应式对象，该对象只有一个 value 固定值。当源值不是基础值（即对象）时，会静默地对该对象调用\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst count = ref(0);\nconsole.log(count.value); \u002F\u002F 0\n\ncount.value++;\nconsole.log(count.value); \u002F\u002F 1\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003Eunref\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E调用后返回一个\u003Ccode\u003Eref\u003C\u002Fcode\u003E值的 value 值，这个 API 是\u003Ccode\u003Eval = isRef(val) ? val.value : val\u003C\u002Fcode\u003E的语法糖。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Efunction useFoo(x: number | Ref&lt;number&gt;) {\n  const unwrapped = unref(x); \u002F\u002F unwrapped is guaranteed to be number now\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003EtoRef\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E调用后返回一个\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E对象的指定属性作为\u003Ccode\u003Eref\u003C\u002Fcode\u003E，该\u003Ccode\u003Eref\u003C\u002Fcode\u003E与\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E的原值互相影响。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst state = reactive({\n  foo: 1,\n  bar: 2,\n});\n\nconst fooRef = toRef(state, 'foo');\n\nfooRef.value++;\nconsole.log(state.foo); \u002F\u002F 2\n\nstate.foo++;\nconsole.log(fooRef.value); \u002F\u002F 3\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003EtoRefs\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E调用后返回一个\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E对象的所有属性的\u003Ccode\u003Eref\u003C\u002Fcode\u003E集合，该\u003Ccode\u003Eref\u003C\u002Fcode\u003E集合的每一个属性值（即每一个 ref）与\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E的原值相互影响。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst state = reactive({\n  foo: 1,\n  bar: 2,\n});\n\nconst stateAsRefs = toRefs(state);\n\u002F*\nType of stateAsRefs:\n\n{\n  foo: Ref&lt;number&gt;,\n  bar: Ref&lt;number&gt;\n}\n*\u002F\n\n\u002F\u002F The ref and the original property is &quot;linked&quot;\nstate.foo++;\nconsole.log(stateAsRefs.foo.value); \u002F\u002F 2\n\nstateAsRefs.foo.value++;\nconsole.log(state.foo); \u002F\u002F 3\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003EisRef\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E检查指定对象是否\u003Ccode\u003Eref\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst count = ref(0);\nconst sum = 0;\n\nisRef(count); \u002F\u002F true\nisRef(sum); \u002F\u002F false\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003EcustomRef\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E创建自定义的\u003Ccode\u003Eref\u003C\u002Fcode\u003E用于细粒度的控制依赖收集和触发，需要提供一个工厂函数，该工厂函数接受参数分别为\u003Ccode\u003Etrack\u003C\u002Fcode\u003E和\u003Ccode\u003Etrigger\u003C\u002Fcode\u003E两个参数，返回值必须是带\u003Ccode\u003Eget\u003C\u002Fcode\u003E、\u003Ccode\u003Eset\u003C\u002Fcode\u003E方法的对象。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;input v-model=&quot;text&quot; \u002F&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Efunction useDebouncedRef(value, delay = 200) {\n  let timeout;\n  return customRef((track, trigger) =&gt; {\n    return {\n      get() {\n        track();\n        return value;\n      },\n      set(newValue) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() =&gt; {\n          value = newValue;\n          trigger();\n        }, delay);\n      },\n    };\n  });\n}\n\nexport default {\n  setup() {\n    return {\n      text: useDebouncedRef('hello'),\n    };\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003EshallowRef\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E因为对非基础值调用\u003Ccode\u003Eref\u003C\u002Fcode\u003E会隐式调用\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E，相当于对\u003Ccode\u003Eref\u003C\u002Fcode\u003E的 value 值调用\u003Ccode\u003EshallowReactive\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst foo = shallowRef({});\n\u002F\u002F mutating the ref's value is reactive\nfoo.value = {};\n\u002F\u002F but the value will not be converted.\nisReactive(foo.value); \u002F\u002F false\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003EtriggerRef\u003C\u002Fcode\u003E：\u003C\u002Fp\u003E\n\u003Cp\u003E新增\u003Ccode\u003EtriggerRef\u003C\u002Fcode\u003E全局 API，改变由\u003Ccode\u003EshallowRef\u003C\u002Fcode\u003E创建的\u003Ccode\u003Eref\u003C\u002Fcode\u003E值后，手动触发\u003Ccode\u003Eref\u003C\u002Fcode\u003E更新以驱动\u003Ccode\u003Ecomputed\u003C\u002Fcode\u003E和\u003Ccode\u003Ewatch\u003C\u002Fcode\u003E等逻辑。\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst shallow = shallowRef({\n  greet: 'Hello, world',\n});\n\n\u002F\u002F Logs &quot;Hello, world&quot; once for the first run-through\nwatchEffect(() =&gt; {\n  console.log(shallow.value.greet);\n});\n\n\u002F\u002F This won't trigger the effect because the ref is shallow\nshallow.value.greet = 'Hello, universe';\n\n\u002F\u002F Logs &quot;Hello, universe&quot;\ntriggerRef(shallow);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"Computed\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'Computed')\"\u003E¶\u003C\u002Fa\u003E Computed\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-3\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-3')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E新增\u003Ccode\u003Ecomputed\u003C\u002Fcode\u003E全局 API，调用该 API 创建动态计算值时，需要提供一个计算函数或者带有\u003Ccode\u003Eget\u003C\u002Fcode\u003E和\u003Ccode\u003Eset\u003C\u002Fcode\u003E函数的对象字面量；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimashili-3\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimashili-3')\"\u003E¶\u003C\u002Fa\u003E 代码示例：\u003C\u002Fh5\u003E\n\u003Cp\u003E类型注解：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u002F\u002F read-only\nfunction computed&lt;T&gt;(getter: () =&gt; T): Readonly&lt;Ref&lt;Readonly&lt;T&gt;&gt;&gt;\n\n\u002F\u002F writable\nfunction computed&lt;T&gt;(options: { get: () =&gt; T; set: (value: T) =&gt; void }): Ref&lt;T&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E使用计算函数的情况：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Econst count = ref(1);\nconst plusOne = computed(() =&gt; count.value++);\n\nconsole.log(plusOne.value); \u002F\u002F 2\n\nplusOne.value++; \u002F\u002F error\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E使用对象字面量的情况：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Econst count = ref(1);\nconst plusOne = computed({\n  get: () =&gt; count.value + 1,\n  set: val =&gt; {\n    count.value = val - 1;\n  },\n});\n\nplusOne.value = 1;\nconsole.log(count.value); \u002F\u002F 0\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"WatchEffect\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'WatchEffect')\"\u003E¶\u003C\u002Fa\u003E WatchEffect\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-4\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-4')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E新增\u003Ccode\u003EwatchEffect\u003C\u002Fcode\u003E全局 API，调用该函数侦听变化时，会\u003Cstrong\u003E立即执行\u003C\u002Fstrong\u003E一次；\u003C\u002Fli\u003E\n\u003Cli\u003E调用该函数后返回\u003Ccode\u003Estop\u003C\u002Fcode\u003E函数，调用\u003Ccode\u003Estop\u003C\u002Fcode\u003E后停止侦听；\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003EwatchEffect\u003C\u002Fcode\u003E的第一个参数为 handle 函数，该 handle 函数接收\u003Ccode\u003EonInvalidate\u003C\u002Fcode\u003E函数，\u003Ccode\u003EonInvalidate\u003C\u002Fcode\u003E在\u003Ccode\u003EwatchEffect\u003C\u002Fcode\u003E被重新触发或者被终止时触发；\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003EwatchEffect\u003C\u002Fcode\u003E的第二个参数为侦听选项，值为对象字面量，\n\u003Cul\u003E\n\u003Cli\u003E选项\u003Ccode\u003Eflush\u003C\u002Fcode\u003E，用于控制\u003Ccode\u003EwatchEffect\u003C\u002Fcode\u003E的执行时机：\u003Cpre  class=\"language-text\"\u003E\u003Ccode class=\"language-text\"\u003Epre  -&gt; 在组件更新前运行\nsync -&gt; 在组件更新时同步运行\npost -&gt; 在组件更新后运行（默认）\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E选项\u003Ccode\u003EonTrack\u003C\u002Fcode\u003E，\u003Ccode\u003EwatchEffect\u003C\u002Fcode\u003E依赖收集时调用，用于 debugger，只在开发模式（development）可用；\u003C\u002Fli\u003E\n\u003Cli\u003E选项\u003Ccode\u003EonTrigger\u003C\u002Fcode\u003E，\u003Ccode\u003EwatchEffect\u003C\u002Fcode\u003E重新运行时调用，用于 debugger，只在开发模式（development）可用；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimashili-4\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimashili-4')\"\u003E¶\u003C\u002Fa\u003E 代码示例：\u003C\u002Fh5\u003E\n\u003Cp\u003E类型注解：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Efunction watchEffect(\n  effect: (onInvalidate: InvalidateCbRegistrator) =&gt; void,\n  options?: WatchEffectOptions\n): StopHandle\n\ninterface WatchEffectOptions {\n  flush?: 'pre' | 'post' | 'sync'\n  onTrack?: (event: DebuggerEvent) =&gt; void\n  onTrigger?: (event: DebuggerEvent) =&gt; void\n}\n\ninterface DebuggerEvent {\n  effect: ReactiveEffect\n  target: any\n  type: OperationTypes\n  key: string | symbol | undefined\n}\n\ntype InvalidateCbRegistrator = (invalidate: () =&gt; void) =&gt; void\n\ntype StopHandle = () =&gt; void\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E默认使用方式：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Econst count = ref(0);\n\nconst stop = watchEffect(() =&gt; console.log(count.value));\n\u002F\u002F -&gt; logs 0\n\nsetTimeout(() =&gt; {\n  count.value++;\n  \u002F\u002F -&gt; logs 1\n}, 100);\n\n\u002F\u002F later 手动结束 watchEffect\nsetTimeout(() =&gt; {\n  stop();\n}, 200);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E同步 Invalidation sync：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003EwatchEffect(onInvalidate =&gt; {\n  const token = performAsyncOperation(id.value);\n  onInvalidate(() =&gt; {\n    \u002F\u002F id 发生了变化或者 watcher 被终止\n    \u002F\u002F 手动终止上一个未结束的异步操作\n    token.cancel();\n  });\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E异步 Invalidation async：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Econst data = ref(null)\nwatchEffect(async onInvalidate =&gt; {\n  onInvalidate(() =&gt; {...}) \u002F\u002F 在异步函数 resolve 前注册清理函数\n  data.value = await fetchData(props.id)\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E参数选项：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003EwatchEffect(\n  () =&gt; {\n    \u002F* side effect *\u002F\n  },\n  {\n    flush: 'pre', \u002F\u002F 改变执行时机\n    \u002F\u002F 收集依赖时 debug\n    onTrack(e) {\n      debugger;\n    },\n    \u002F\u002F 被触发时 debug\n    onTrigger(e) {\n      debugger;\n    },\n  },\n);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"Watch\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'Watch')\"\u003E¶\u003C\u002Fa\u003E Watch\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-5\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-5')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E新增\u003Ccode\u003Ewatch\u003C\u002Fcode\u003E全局 API，调用该函数侦听变化时，默认执行方式为\u003Ccode\u003Elazy\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003Cli\u003E可同时侦听多个属性；\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ewatch\u003C\u002Fcode\u003E的第二个参数为 handle 函数，该 handle 函数接收\u003Ccode\u003EonInvalidate\u003C\u002Fcode\u003E函数，\u003Ccode\u003EonInvalidate\u003C\u002Fcode\u003E在\u003Ccode\u003Ewatch\u003C\u002Fcode\u003E被重新触发或者被终止时触发；\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ewatch\u003C\u002Fcode\u003E的第三个参数为侦听选项，值为对象字面量，\n\u003Cul\u003E\n\u003Cli\u003E选项\u003Ccode\u003Eflush\u003C\u002Fcode\u003E，用于控制\u003Ccode\u003Ewatch\u003C\u002Fcode\u003E的执行时机：\u003Cpre  class=\"language-text\"\u003E\u003Ccode class=\"language-text\"\u003Epre  -&gt; 在组件更新前运行\nsync -&gt; 在组件更新时同步运行\npost -&gt; 在组件更新后运行（默认）\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E选项\u003Ccode\u003EonTrack\u003C\u002Fcode\u003E，\u003Ccode\u003Ewatch\u003C\u002Fcode\u003E依赖收集时调用，用于 debugger，只在开发模式（development）可用；\u003C\u002Fli\u003E\n\u003Cli\u003E选项\u003Ccode\u003EonTrigger\u003C\u002Fcode\u003E，\u003Ccode\u003Ewatch\u003C\u002Fcode\u003E重新运行时调用，用于 debugger，只在开发模式（development）可用；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimashili-5\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimashili-5')\"\u003E¶\u003C\u002Fa\u003E 代码示例：\u003C\u002Fh5\u003E\n\u003Cp\u003E类型注解：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u002F\u002F 侦听单个属性源\nfunction watch&lt;T&gt;(\n  source: WatcherSource&lt;T&gt;,\n  callback: (\n    value: T,\n    oldValue: T,\n    onInvalidate: InvalidateCbRegistrator\n  ) =&gt; void,\n  options?: WatchOptions\n): StopHandle\n\n\u002F\u002F 侦听多个属性源\nfunction watch&lt;T extends WatcherSource&lt;unknown&gt;[]&gt;(\n  sources: T\n  callback: (\n    values: MapSources&lt;T&gt;,\n    oldValues: MapSources&lt;T&gt;,\n    onInvalidate: InvalidateCbRegistrator\n  ) =&gt; void,\n  options? : WatchOptions\n): StopHandle\n\ntype WatcherSource&lt;T&gt; = Ref&lt;T&gt; | (() =&gt; T)\n\ntype MapSources&lt;T&gt; = {\n  [K in keyof T]: T[K] extends WatcherSource&lt;infer V&gt; ? V : never\n}\n\n\u002F\u002F 从 `watchEffect` 类型扩展\ninterface WatchOptions extends WatchEffectOptions {\n  immediate?: boolean \u002F\u002F default: false\n  deep?: boolean\n  \u002F\u002F flush?: 'pre' | 'post' | 'sync'\n  \u002F\u002F onTrack?: (event: DebuggerEvent) =&gt; void\n  \u002F\u002F onTrigger?: (event: DebuggerEvent) =&gt; void\n}\n\ninterface DebuggerEvent {\n  effect: ReactiveEffect\n  target: any\n  type: OperationTypes\n  key: string | symbol | undefined\n}\n\ntype InvalidateCbRegistrator = (invalidate: () =&gt; void) =&gt; void\n\ntype StopHandle = () =&gt; void\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E侦听单属性：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003E\u002F\u002F 侦听 getter\nconst state = reactive({ count: 0 });\nwatch(\n  () =&gt; state.count,\n  (count, prevCount) =&gt; {\n    \u002F* ... *\u002F\n  },\n);\n\n\u002F\u002F 直接侦听 ref\nconst count = ref(0);\nconst stop = watch(count, (count, prevCount) =&gt; {\n  \u002F* ... *\u002F\n});\n\n\u002F\u002F later 手动结束 watch\nsetTimeout(() =&gt; {\n  stop();\n}, 200);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E侦听多属性：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Ewatch([fooRef, barRef], ([foo, bar], [prevFoo, prevBar]) =&gt; {\n  \u002F* ... *\u002F\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E同步 Invalidation sync：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Econst data = ref(null);\nwatch(data, (data, prevData, onInvalidate) =&gt; {\n  const token = performAsyncOperation(data.value);\n  onInvalidate(() =&gt; {\n    \u002F\u002F id 发生了变化或者 watcher 被终止\n    \u002F\u002F 手动终止上一个未结束的异步操作\n    token.cancel();\n  });\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E异步 Invalidation async：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Econst data = ref(null);\nwatch(data, async (data, prevData, onInvalidate) =&gt; {\n  onInvalidate(() =&gt; {...}); \u002F\u002F 在异步函数 resolve 前注册清理函数\n  data.value = await fetchData(props.id);\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E参数选项：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Econst data = ref(null);\nwatch(\n  data,\n  (data, prevData) =&gt; {\n    \u002F* side effect *\u002F\n  },\n  {\n    immediate: true, \u002F\u002F 立即执行\n    deep: true, \u002F\u002F 深度侦听\n    flush: 'pre', \u002F\u002F 改变执行时机\n    \u002F\u002F 收集依赖时 debug\n    onTrack(e) {\n      debugger;\n    },\n    \u002F\u002F 被触发时 debug\n    onTrigger(e) {\n      debugger;\n    },\n  },\n);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"setup\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'setup')\"\u003E¶\u003C\u002Fa\u003E setup\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-6\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-6')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E添加\u003Ccode\u003Esetup\u003C\u002Fcode\u003E组件选项，在组件\u003Cstrong\u003E创建前\u003C\u002Fstrong\u003E被调用，接收\u003Ccode\u003Eprops\u003C\u002Fcode\u003E和\u003Ccode\u003Econtext\u003C\u002Fcode\u003E两个参数；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimashili-6\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimashili-6')\"\u003E¶\u003C\u002Fa\u003E 代码示例：\u003C\u002Fh5\u003E\n\u003Cp\u003E类型注解：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Einterface Data {\n  [key: string]: unknown;\n}\n\ninterface SetupContext {\n  attrs: Data;\n  slots: Slots;\n  emit: (event: string, ...args: unknown[]) =&gt; void;\n}\n\nfunction setup(props: Data, context: SetupContext): Data;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E使用\u003Ccode\u003E&lt;template&gt;\u003C\u002Fcode\u003E的方式：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;!-- MyBook.vue --&gt;\n&lt;template&gt;\n  &lt;div&gt;{{ readersNumber }} {{ book.title }}&lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\n  import { ref, reactive } from 'vue';\n\n  export default {\n    setup() {\n      const readersNumber = ref(0);\n      const book = reactive({ title: 'Vue 3 Guide' });\n\n      \u002F\u002F expose to template\n      return {\n        readersNumber,\n        book,\n      };\n    },\n  };\n&lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E使用\u003Ccode\u003Erender\u003C\u002Fcode\u003E function 的方式：\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"10\" class=\"language-js\"\u003E\u003Ccode data-line=\"10\" class=\"language-js\"\u003E\u002F\u002F MyBook.vue\n\nimport { h, ref, reactive } from 'vue';\n\nexport default {\n  setup() {\n    const readersNumber = ref(0);\n    const book = reactive({ title: 'Vue 3 Guide' });\n    \u002F\u002F 注意返回的 render 函数内使用 ref 类型的值，应该取它的 value 值\n    return () =&gt; h('div', [readersNumber.value, book.title]);\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"setupzhuanyongshengmingzhouqigouzi\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'setupzhuanyongshengmingzhouqigouzi')\"\u003E¶\u003C\u002Fa\u003E setup 专用生命周期钩子\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-7\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-7')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003E增加\u003Ccode\u003Esetup()\u003C\u002Fcode\u003E专用的生命周期钩子，除\u003Ccode\u003EbeforeCreate\u003C\u002Fcode\u003E和\u003Ccode\u003Ecreated\u003C\u002Fcode\u003E外其它钩子与选项内的钩子相同，如同下表：\u003C\u002Fp\u003E\n\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth style=\"text-align:left\"\u003E选项 API\u003C\u002Fth\u003E\n\u003Cth style=\"text-align:left\"\u003E\u003Ccode\u003Esetup()\u003C\u002Fcode\u003E内 API\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EbeforeCreate\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EN\u002FA\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003Ecreated\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EN\u002FA\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EbeforeMount\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EonBeforeMount\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003Emounted\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EonMounted\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EbeforeUpdate\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EonBeforeUpdate\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003Eupdated\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EonUpdated\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EbeforeUnmount\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EonBeforeUnmount\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003Eunmounted\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EonUnmounted\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EerrorCaptured\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EonErrorCaptured\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003ErenderTracked\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EonRenderTracked\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003ErenderTriggered\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EonRenderTriggered\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimashili-7\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimashili-7')\"\u003E¶\u003C\u002Fa\u003E 代码示例：\u003C\u002Fh5\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Eimport { onMounted, onUpdated, onUnmounted } from 'vue';\n\nconst MyComponent = {\n  setup() {\n    onMounted(() =&gt; {\n      console.log('mounted!');\n    });\n    onUpdated(() =&gt; {\n      console.log('updated!');\n    });\n    onUnmounted(() =&gt; {\n      console.log('unmounted!');\n    });\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"Teleport\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'Teleport')\"\u003E¶\u003C\u002Fa\u003E Teleport\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-8\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-8')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E添加\u003Ccode\u003E&lt;teleport&gt;\u003C\u002Fcode\u003E组件；\u003C\u002Fli\u003E\n\u003Cli\u003E需要通过 prop \u003Ccode\u003Eto\u003C\u002Fcode\u003E 给\u003Ccode\u003E&lt;teleport&gt;\u003C\u002Fcode\u003E组件提供一个目标元素，值可选项为\u003Ccode\u003EHTMLElement\u003C\u002Fcode\u003E或者是一个合法的\u003Ccode\u003EquerySelector\u003C\u002Fcode\u003E字符串；\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003E&lt;teleport&gt;\u003C\u002Fcode\u003E组件将会移动它的 children 元素到上面指定的 DOM；\u003C\u002Fli\u003E\n\u003Cli\u003E在 virtual DOM 的层面上，children 元素仍属于\u003Ccode\u003E&lt;teleport&gt;\u003C\u002Fcode\u003E的后代，因此\u003Ccode\u003E&lt;teleport&gt;\u003C\u002Fcode\u003E包含的其它自定义子组件可以访问到祖先组件的注入（injections）；\u003C\u002Fli\u003E\n\u003Cli\u003E多个\u003Ccode\u003E&lt;teleport&gt;\u003C\u002Fcode\u003E组件具有相同的\u003Ccode\u003Eto\u003C\u002Fcode\u003E目标时，将会按照组件顺序 append 到目标 DOM 内；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimashili-8\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimashili-8')\"\u003E¶\u003C\u002Fa\u003E 代码示例：\u003C\u002Fh5\u003E\n\u003Cpre  data-line=\"4,14\" class=\"language-html\"\u003E\u003Ccode data-line=\"4,14\" class=\"language-html\"\u003E&lt;body&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;h1&gt;Move the #content with the portal component&lt;\u002Fh1&gt;\n    &lt;teleport to=&quot;#endofbody&quot;&gt;\n      &lt;div id=&quot;content&quot;&gt;\n        &lt;p&gt;\n          this will be moved to #endofbody.&lt;br \u002F&gt;\n          Pretend that it's a modal\n        &lt;\u002Fp&gt;\n        &lt;Child \u002F&gt;\n      &lt;\u002Fdiv&gt;\n    &lt;\u002Fteleport&gt;\n  &lt;\u002Fdiv&gt;\n  &lt;div id=&quot;endofbody&quot;&gt;&lt;\u002Fdiv&gt;\n  &lt;script&gt;\n    new Vue({\n      el: '#app',\n      components: {\n        Child: { template: '&lt;div&gt;Placeholder&lt;\u002Fdiv&gt;' },\n      },\n    });\n  &lt;\u002Fscript&gt;\n&lt;\u002Fbody&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;!-- result--&gt;\n\n&lt;div id=&quot;app&quot;&gt;\n  &lt;!-- --&gt;\n&lt;\u002Fdiv&gt;\n&lt;div id=&quot;endofbody&quot;&gt;\n  &lt;div id=&quot;content&quot;&gt;\n    &lt;p&gt;\n      this will be moved to #endofbody.&lt;br \u002F&gt;\n      Pretend that it's a modal\n    &lt;\u002Fp&gt;\n    &lt;div&gt;Placeholder&lt;\u002Fdiv&gt;\n  &lt;\u002Fdiv&gt;\n&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E多个\u003Ccode\u003E&lt;teleport&gt;\u003C\u002Fcode\u003E目标为同一个 DOM 的情况：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;teleport to=&quot;#modals&quot;&gt;\n  &lt;div&gt;A&lt;\u002Fdiv&gt;\n&lt;\u002Fteleport&gt;\n&lt;teleport to=&quot;#modals&quot;&gt;\n  &lt;div&gt;B&lt;\u002Fdiv&gt;\n&lt;\u002Fteleport&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;!-- result--&gt;\n\n&lt;div id=&quot;modals&quot;&gt;\n  &lt;div&gt;A&lt;\u002Fdiv&gt;\n  &lt;div&gt;B&lt;\u002Fdiv&gt;\n&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"duogenyuansuFragmentsmultirootnode\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'duogenyuansuFragmentsmultirootnode')\"\u003E¶\u003C\u002Fa\u003E 多根元素 Fragments(multi-root node)\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-9\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-9')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E不再限制自定义组件只能具有一个根元素，支持多个根元素的情况；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;!-- Layout.vue --&gt;\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;header&gt;...&lt;\u002Fheader&gt;\n    &lt;main&gt;...&lt;\u002Fmain&gt;\n    &lt;footer&gt;...&lt;\u002Ffooter&gt;\n  &lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;!-- Layout.vue --&gt;\n&lt;template&gt;\n  &lt;header&gt;...&lt;\u002Fheader&gt;\n  &lt;main v-bind=&quot;$attrs&quot;&gt;...&lt;\u002Fmain\n  &gt;&lt;!-- 手动绑定组件外部未声明为 prop 的属性 --&gt;\n  &lt;footer&gt;...&lt;\u002Ffooter&gt;\n&lt;\u002Ftemplate&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"Suspense\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'Suspense')\"\u003E¶\u003C\u002Fa\u003E Suspense\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-10\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-10')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E增加\u003Ccode\u003E&lt;suspense&gt;\u003C\u002Fcode\u003E组件，用于控制数据显示；\u003C\u002Fli\u003E\n\u003Cli\u003E需要提供两个\u003Ccode\u003E&lt;template&gt;\u003C\u002Fcode\u003E作为\u003Ccode\u003E&lt;suspense&gt;\u003C\u002Fcode\u003E的子元素，id 为\u003Ccode\u003Edefault\u003C\u002Fcode\u003E的模板装载的内容为正常显示内容，id 为\u003Ccode\u003Efallback\u003C\u002Fcode\u003E的模板装载的内容为无内容时显示；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimashili-9\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimashili-9')\"\u003E¶\u003C\u002Fa\u003E 代码示例：\u003C\u002Fh5\u003E\n\u003Cpre  data-line=\"3,11\" class=\"language-html\"\u003E\u003Ccode data-line=\"3,11\" class=\"language-html\"\u003E&lt;template&gt;\n  &lt;Suspense&gt;\n    &lt;template #default&gt;\n      &lt;div v-for=&quot;item in articleList&quot; :key=&quot;item.id&quot;&gt;\n        &lt;article&gt;\n          &lt;h2&gt;{{ item.title }}&lt;\u002Fh2&gt;\n          &lt;p&gt;{{ item.body }}&lt;\u002Fp&gt;\n        &lt;\u002Farticle&gt;\n      &lt;\u002Fdiv&gt;\n    &lt;\u002Ftemplate&gt;\n    &lt;template #fallback&gt;\n      Articles loading...\n    &lt;\u002Ftemplate&gt;\n  &lt;\u002FSuspense&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\n  import getArticleList from 'getArticleList';\n  export default {\n    async setup() {\n      let articleList = await getArticleList();\n      return {\n        articleList,\n      };\n    },\n  };\n&lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"zidingyishijianEvents\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'zidingyishijianEvents')\"\u003E¶\u003C\u002Fa\u003E 自定义事件 Events\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-11\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-11')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E增加组件\u003Ccode\u003Eemits\u003C\u002Fcode\u003E选项，用于定义该组件需要关注的事件，当该选项包含原生事件（e.g.，\u003Ccode\u003Eclick\u003C\u002Fcode\u003E）时，该原生事件将被组件的自定义事件覆盖；\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eemits\u003C\u002Fcode\u003E选项内可指定事件的校验函数，用于事件触发时校验提供的参数是否合理；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimashili-10\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimashili-10')\"\u003E¶\u003C\u002Fa\u003E 代码示例：\u003C\u002Fh5\u003E\n\u003Cp\u003E使用数组结构定义：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Eapp.component('custom-form', {\n  emits: ['in-focus', 'submit'],\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E使用对象结构定义：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Eapp.component('custom-form', {\n  emits: {\n    \u002F\u002F 不校验事件\n    click: null,\n\n    \u002F\u002F 校验触发的事件\n    submit: ({ email, password }) =&gt; {\n      if (email &amp;&amp; password) {\n        return true;\n      } else {\n        console.warn('Invalid submit event payload!');\n        return false;\n      }\n    },\n  },\n  methods: {\n    submitForm() {\n      this.$emit('submit', { email, password });\n    },\n  },\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"zidingyixuanranqiRenderer\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'zidingyixuanranqiRenderer')\"\u003E¶\u003C\u002Fa\u003E 自定义渲染器 Renderer\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-12\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-12')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E支持使用 API\u003Ccode\u003EcreateRenderer\u003C\u002Fcode\u003E自定义渲染器，调用该 API 需要返回\u003Ccode\u003Erender\u003C\u002Fcode\u003E和\u003Ccode\u003EcreateApp\u003C\u002Fcode\u003E两个全局 API；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimashili-11\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimashili-11')\"\u003E¶\u003C\u002Fa\u003E 代码示例：\u003C\u002Fh5\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Eimport { createRenderer } from 'vue'\nconst { render, createApp } = createRenderer&lt;Node, Element&gt;({\n  patchProp,\n  ...nodeOps\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch2 id=\"BREAKINGpohuaixinggenggai\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'BREAKINGpohuaixinggenggai')\"\u003E¶\u003C\u002Fa\u003E BREAKING | 破坏性更改\u003C\u002Fh2\u003E\n\u003Ch3 id=\"quanjuAPIGlobal\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'quanjuAPIGlobal')\"\u003E¶\u003C\u002Fa\u003E 全局 API Global\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-13\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-13')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003E提供的新的\u003Ccode\u003EcreateApp\u003C\u002Fcode\u003E api 用以声明式实例化应用；\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E部分\u003Ccode\u003EVue\u003C\u002Fcode\u003E构造函数的静态方法转变为全局方法，并移除\u003Ccode\u003E$\u003C\u002Fcode\u003E开头的同名实例方法，整体变化如下：\u003C\u002Fp\u003E\n\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth style=\"text-align:left\"\u003E2.x 静态方法\u003C\u002Fth\u003E\n\u003Cth style=\"text-align:left\"\u003E3.x 全局方法\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EVue.nextTick\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EnextTick\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EVue.observable\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Ereactive\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EVue.version\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Eversion\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EVue.compile\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Ecompile\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EVue.set\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Eset\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EVue.delete\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Edelete\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E部分全局 API 变为实例 API，整体变化如下：\u003C\u002Fp\u003E\n\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth style=\"text-align:left\"\u003E2.x 全局 API\u003C\u002Fth\u003E\n\u003Cth style=\"text-align:left\"\u003E3.x 实例 API\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EVue.config\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Eapp.config\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EVue.config.productionTip\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EN\u002FA\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EVue.config.ignoredElements\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Eapp.config.isCustomElement\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EVue.component\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Eapp.component\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EVue.directive\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Eapp.directive\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EVue.mixin\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Eapp.mixin\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003EVue.use\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Eapp.use\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E提供内部帮助函数作为全局 API，例如\u003Ccode\u003Eh\u003C\u002Fcode\u003E、\u003Ccode\u003ETransition\u003C\u002Fcode\u003E、\u003Ccode\u003EwithDirectives\u003C\u002Fcode\u003E、\u003Ccode\u003EvShow\u003C\u002Fcode\u003E...\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimashixian\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimashixian')\"\u003E¶\u003C\u002Fa\u003E 代码实现：\u003C\u002Fh5\u003E\n\u003Cp\u003E\u003Ccode\u003EcreateApp\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Eimport { createApp } from 'vue';\n\nconst app = createApp({});\napp.mount('#app');\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E全局方法：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Eimport { shallowMount } from '@vue\u002Ftest-utils';\nimport { MyComponent } from '.\u002FMyComponent.vue';\nimport { nextTick } from 'vue';\n\ntest('an async feature', async () =&gt; {\n  const wrapper = shallowMount(MyComponent);\n\n  \u002F\u002F execute some DOM-related tasks\n\n  await nextTick();\n\n  \u002F\u002F run your assertions\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E实例方法：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Econst app = createApp(MyApp);\n\napp.component('button-counter', {\n  data: () =&gt; ({\n    count: 0,\n  }),\n  template: '&lt;button @click=&quot;count++&quot;&gt;Clicked {{ count }} times.&lt;\u002Fbutton&gt;',\n});\n\napp.directive('focus', {\n  mounted: el =&gt; el.focus(),\n});\n\n\u002F\u002F now every application instance mounted with app.mount(), along with its\n\u002F\u002F component tree, will have the same “button-counter” component\n\u002F\u002F and “focus” directive without polluting the global environment\napp.mount('#app');\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E内部帮助函数：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003Eimport { h, Transition, withDirectives, vShow } from 'vue';\n\nexport function render() {\n  return h(Transition, [withDirectives(h('div', 'hello'), [[vShow, this.ok]])]);\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"shuangxiangbangdingvmodel\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'shuangxiangbangdingvmodel')\"\u003E¶\u003C\u002Fa\u003E 双向绑定 v-model\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-14\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-14')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E自定义组件内的\u003Ccode\u003Ev-model\u003C\u002Fcode\u003E的 prop 和 event 默认名称变更如下：\u003Cpre  class=\"language-text\"\u003E\u003Ccode class=\"language-text\"\u003Eprop: value -&gt; modelValue;\nevent: input -&gt; update:modelValue;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ev-bind\u003C\u002Fcode\u003E的\u003Ccode\u003E.sync\u003C\u002Fcode\u003E修饰符和自定义组件的\u003Ccode\u003Emodel\u003C\u002Fcode\u003E选项移除，并用\u003Ccode\u003Ev-model\u003C\u002Fcode\u003E上的参数作为替代；\u003C\u002Fli\u003E\n\u003Cli\u003E自定义组件支持多个自定义的\u003Ccode\u003Ev-model\u003C\u002Fcode\u003E绑定；\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ev-model\u003C\u002Fcode\u003E支持自定义修饰符；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-2\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-2')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cp\u003E默认使用方式：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;ChildComponent v-model=&quot;pageTitle&quot; \u002F&gt;\n\n&lt;!-- 等价于下面的写法: --&gt;\n\n&lt;ChildComponent :value=&quot;pageTitle&quot; @input=&quot;pageTitle = $event&quot; \u002F&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E自定义\u003Ccode\u003Ev-model\u003C\u002Fcode\u003E的 prop 和 event 的使用方式：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;!-- ParentComponent.vue --&gt;\n\n&lt;ChildComponent v-model=&quot;pageTitle&quot; \u002F&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  data-line=\"4-7\" class=\"language-js\"\u003E\u003Ccode data-line=\"4-7\" class=\"language-js\"\u003E\u002F\u002F ChildComponent.vue\n\nexport default {\n  model: {\n    prop: 'title',\n    event: 'change',\n  },\n  props: {\n    \u002F\u002F 释放 `value` prop 以用作其它用途\n    value: String,\n    \u002F\u002F 使用 `title` 替换默认的 `value` v-model 值\n    title: {\n      type: String,\n      default: 'Default title',\n    },\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;!-- 等价于下面的写法: --&gt;\n\n&lt;ChildComponent :title=&quot;pageTitle&quot; @change=&quot;pageTitle = $event&quot; \u002F&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E使用\u003Ccode\u003Ev-bind.sync\u003C\u002Fcode\u003E的方式：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u002F\u002F 在子组件内 emit 以 :update 开头的自定义事件\n\nthis.$emit('update:title', newValue);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;!-- 监听自定义的 update 事件 --&gt;\n\n&lt;ChildComponent :title=&quot;pageTitle&quot; @update:title=&quot;pageTitle = $event&quot; \u002F&gt;\n\n&lt;!-- 等价于下面的写法: --&gt;\n\n&lt;ChildComponent :title.sync=&quot;pageTitle&quot; \u002F&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cp\u003E默认使用方式：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;ChildComponent v-model=&quot;pageTitle&quot; \u002F&gt;\n\n&lt;!-- 等价于下面的写法: --&gt;\n&lt;!-- value -&gt; modelValue --&gt;\n&lt;!-- input -&gt; update:modelValue --&gt;\n\n&lt;ChildComponent :modelValue=&quot;pageTitle&quot; @update:modelValue=&quot;pageTitle = $event&quot; \u002F&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E自定义\u003Ccode\u003Ev-model\u003C\u002Fcode\u003E和多个\u003Ccode\u003Ev-model\u003C\u002Fcode\u003E的方式（\u003Ccode\u003E.sync\u003C\u002Fcode\u003E因这种实现方式而不再有用，所以废除）：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;ChildComponent v-model:title=&quot;pageTitle&quot; v-model:content=&quot;pageContent&quot; \u002F&gt;\n\n&lt;!-- 等价于下面的写法: --&gt;\n\n&lt;ChildComponent :title=&quot;pageTitle&quot; @update:title=&quot;pageTitle = $event&quot; :content=&quot;pageContent&quot; @update:content=&quot;pageContent = $event&quot; \u002F&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cimg src=\"_nuxt\u002Fimg\u002Fpic-0.cb59705.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003Ev-model\u003C\u002Fcode\u003E自定义修饰符：\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"2\" class=\"language-html\"\u003E\u003Ccode data-line=\"2\" class=\"language-html\"\u003E&lt;div id=&quot;app&quot;&gt;\n  &lt;my-component v-model.capitalize=&quot;myText&quot;&gt;&lt;\u002Fmy-component&gt;\n  {{ myText }}\n&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  data-line=\"13-15,21\" class=\"language-js\"\u003E\u003Ccode data-line=\"13-15,21\" class=\"language-js\"\u003Econst app = Vue.createApp({\n  data() {\n    return {\n      myText: '',\n    };\n  },\n});\n\napp.component('my-component', {\n  props: {\n    modelValue: String,\n    \u002F\u002F 默认修饰符的 prop 为 modelModifiers，自定义 v-model 的修饰符形如：[propName]Modifiers，\n    modelModifiers: {\n      default: () =&gt; ({}),\n    },\n  },\n  methods: {\n    emitValue(e) {\n      let value = e.target.value;\n      \u002F\u002F 根据修饰符可以做相应处理\n      if (this.modelModifiers.capitalize) {\n        value = value.charAt(0).toUpperCase() + value.slice(1);\n      }\n      this.$emit('update:modelValue', value);\n    },\n  },\n  template: `&lt;input\n    type=&quot;text&quot;\n    :value=&quot;modelValue&quot;\n    @input=&quot;emitValue&quot;&gt;`,\n});\n\napp.mount('#app');\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E自定义 v-model 情况下的自定义修饰符：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;my-component v-model:foo.capitalize=&quot;bar&quot;&gt;&lt;\u002Fmy-component&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  data-line=\"2,9\" class=\"language-js\"\u003E\u003Ccode data-line=\"2,9\" class=\"language-js\"\u003Eapp.component('my-component', {\n  props: ['foo', 'fooModifiers'],\n  template: `\n    &lt;input type=&quot;text&quot;\n      :value=&quot;foo&quot;\n      @input=&quot;$emit('update:foo', $event.target.value)&quot;&gt;\n  `,\n  created() {\n    console.log(this.fooModifiers); \u002F\u002F { capitalize: true }\n  },\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"xuanranhanshuAPIRender\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'xuanranhanshuAPIRender')\"\u003E¶\u003C\u002Fa\u003E 渲染函数 API Render\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-15\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-15')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Eh\u003C\u002Fcode\u003E需要从\u003Ccode\u003EVue\u003C\u002Fcode\u003E全局引入，以取代原\u003Ccode\u003Erender\u003C\u002Fcode\u003E函数内提供的\u003Ccode\u003EcreateElement\u003C\u002Fcode\u003E函数；\u003C\u002Fli\u003E\n\u003Cli\u003Erender 函数不再接受任何参数；\u003C\u002Fli\u003E\n\u003Cli\u003EVNodes 的 props 结构扁平化；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-3\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-3')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003Erender 函数参数\u003C\u002Fp\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003E\u002F\u002F Vue 2 Render Function Example\nexport default {\n  render(h) {\n    return h('div');\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"2\" class=\"language-javascript\"\u003E\u003Ccode data-line=\"2\" class=\"language-javascript\"\u003E\u002F\u002F Vue 3 Render Function Example\nimport { h } from 'vue';\n\nexport default {\n  render() {\n    return h('div');\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003Erender 函数签名变化\u003C\u002Fp\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003E\u002F\u002F Vue 2 Render Function Example\nexport default {\n  render(h) {\n    return h('div');\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Eimport { h, reactive } from 'vue';\n\nexport default {\n  setup(props, { slots, attrs, emit }) {\n    const state = reactive({\n      count: 0,\n    });\n\n    function increment() {\n      state.count++;\n    }\n\n    \u002F\u002F return the render function\n    return () =&gt;\n      h(\n        'div',\n        {\n          onClick: increment,\n        },\n        state.count,\n      );\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003EVNode props 格式\u003C\u002Fp\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u002F\u002F 2.x\n{\n  class: ['button', 'is-outlined'],\n  style: { color: '#34495E' },\n  attrs: { id: 'submit' },\n  domProps: { innerHTML: '' },\n  on: { click: submitForm },\n  key: 'submit-button'\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"5-7\" class=\"language-js\"\u003E\u003Ccode data-line=\"5-7\" class=\"language-js\"\u003E\u002F\u002F 3.x Syntax\n{\n  class: ['button', 'is-outlined'],\n  style: { color: '#34495E' },\n  id: 'submit',\n  innerHTML: '',\n  onClick: submitForm,\n  key: 'submit-button'\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"hanshushizujianFunctionalComponent\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'hanshushizujianFunctionalComponent')\"\u003E¶\u003C\u002Fa\u003E 函数式组件 Functional Component\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-16\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-16')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E函数式组件的性能优化已经在 3.x 被忽略，建议只使用有状态的组件；\u003C\u002Fli\u003E\n\u003Cli\u003E函数式组件只能使用简单函数创建，该函数接收\u003Ccode\u003Eprops\u003C\u002Fcode\u003E和\u003Ccode\u003Econtext\u003C\u002Fcode\u003E两个参数；\u003C\u002Fli\u003E\n\u003Cli\u003E单文件组件的\u003Ccode\u003Efunctional\u003C\u002Fcode\u003E属性移除；\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003E{ functional: true }\u003C\u002Fcode\u003E选项移除；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-4\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-4')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cp\u003E无\u003Ccode\u003E&lt;template&gt;\u003C\u002Fcode\u003E的情况：\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"2\" class=\"language-javascript\"\u003E\u003Ccode data-line=\"2\" class=\"language-javascript\"\u003Eexport default {\n  functional: true,\n  props: ['level'],\n  render(h, { props, data, children }) {\n    return h(`h${props.level}`, data, children);\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E带\u003Ccode\u003E&lt;template&gt;\u003C\u002Fcode\u003E的情况：\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"2\" class=\"language-html\"\u003E\u003Ccode data-line=\"2\" class=\"language-html\"\u003E&lt;template&gt;\n  &lt;template functional&gt;\n    &lt;component :is=&quot;`h${props.level}`&quot; v-bind=&quot;attrs&quot; v-on=&quot;listeners&quot; \u002F&gt;\n  &lt;\u002Ftemplate&gt;\n\n  &lt;script&gt;\n    export default {\n      props: ['level'],\n    };\n  &lt;\u002Fscript&gt;&lt;\u002Ftemplate\n&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Eimport { h } from 'vue';\n\nconst DynamicHeading = (props, context) =&gt; {\n  return h(`h${props.level}`, context.attrs, context.slots);\n};\n\nDynamicHeading.props = ['level'];\n\nexport default DynamicHeading;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"yibuzujianAsyncComponent\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'yibuzujianAsyncComponent')\"\u003E¶\u003C\u002Fa\u003E 异步组件 Async Component\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-17\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-17')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E使用新的\u003Ccode\u003EdefineAsyncComponent\u003C\u002Fcode\u003E方法定义异步组件；\u003C\u002Fli\u003E\n\u003Cli\u003E定义组件带选项时，\u003Ccode\u003Ecomponent\u003C\u002Fcode\u003E更名为\u003Ccode\u003Eloader\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003Cli\u003E新的\u003Ccode\u003Eloader\u003C\u002Fcode\u003E选项必须返回一个 \u003Cstrong\u003E\u003Cem\u003EPromise\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E；\u003C\u002Fli\u003E\n\u003Cli\u003E定义组件带选项时，\u003Ccode\u003Eloading\u003C\u002Fcode\u003E更名为\u003Ccode\u003ELoadingComponent\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003Cli\u003E定义组件带选项时，\u003Ccode\u003Eerror\u003C\u002Fcode\u003E更名为\u003Ccode\u003EerrorComponent\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003Cli\u003E新增定义组件选项\u003Ccode\u003EretryWhen\u003C\u002Fcode\u003E，用于控制当组件加载失败时，指定情况才进行重试加载；\u003C\u002Fli\u003E\n\u003Cli\u003E新增定义组件选项\u003Ccode\u003EmaxRetries\u003C\u002Fcode\u003E，控制重试加载的次数；\u003C\u002Fli\u003E\n\u003Cli\u003E新增定义组件选项\u003Ccode\u003Esuspensible\u003C\u002Fcode\u003E，默认为 true，为 true 时，定义的\u003Ccode\u003EloadingComponent\u003C\u002Fcode\u003E和\u003Ccode\u003EerrorComponent\u003C\u002Fcode\u003E将被无视；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-5\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-5')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Eimport ErrorComponent from '.\u002Fcomponents\u002FErrorComponent.vue';\nimport LoadingComponent from '.\u002Fcomponents\u002FLoadingComponent.vue';\n\n\u002F\u002F 无选项异步组件\nVue.component('async-component', () =&gt; import('.\u002Fmy-async-component'));\n\n\u002F\u002F 带选项异步组件\nconst AsyncComponent = () =&gt; ({\n  \u002F\u002F 需要加载的组件 (应该是一个 `Promise` 对象)\n  component: import('.\u002FMyComponent.vue'),\n  \u002F\u002F 异步组件加载时使用的组件\n  loading: LoadingComponent,\n  \u002F\u002F 加载失败时使用的组件\n  error: ErrorComponent,\n  \u002F\u002F 展示加载时组件的延时时间。默认值是 200 (毫秒)\n  delay: 200,\n  \u002F\u002F 如果提供了超时时间且组件加载也超时了，\n  \u002F\u002F 则使用加载失败时使用的组件。默认值是：`Infinity`\n  timeout: 3000,\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"3,11\" class=\"language-javascript\"\u003E\u003Ccode data-line=\"3,11\" class=\"language-javascript\"\u003Eimport ErrorComponent from '.\u002Fcomponents\u002FErrorComponent.vue';\nimport LoadingComponent from '.\u002Fcomponents\u002FLoadingComponent.vue';\nimport { defineAsyncComponent } from 'vue';\n\n\u002F\u002F 无选项异步组件\nconst asyncPage = defineAsyncComponent(() =&gt; import('.\u002Fmy-async-component'));\n\n\u002F\u002F 带选项异步组件\nconst asyncPageWithOptions = defineAsyncComponent({\n  \u002F\u002F component 更名为 loader\n  loader: () =&gt; import('.\u002Fmy-async-component'),\n  \u002F\u002F A component to use while the async component is loading\n  loadingComponent: LoadingComponent,\n  \u002F\u002F A component to use if the load fails\n  errorComponent: ErrorComponent,\n  \u002F\u002F Delay before showing the loading component. Default: 200ms.\n  delay: 200,\n  \u002F\u002F The error component will be displayed if a timeout is\n  \u002F\u002F provided and exceeded. Default: Infinity.\n  timeout: 3000,\n  \u002F\u002F A function that returns a boolean indicating whether the async component should retry when the loader promise rejects\n  retryWhen: error =&gt; error.code !== 404,\n  \u002F\u002F Maximum allowed retries number\n  maxRetries: 3,\n  \u002F\u002F Defining if component is suspensible\n  suspensible: false,\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"Dataxuanxiang\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'Dataxuanxiang')\"\u003E¶\u003C\u002Fa\u003E Data 选项\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-18\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-18')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Edata\u003C\u002Fcode\u003E组件选项声明不再接受对象字面量，只接受\u003Ccode\u003Efunction\u003C\u002Fcode\u003E的声明方式；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-6\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-6')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;!-- Object Declaration --&gt;\n&lt;script&gt;\n  const app = new Vue({\n    data: {\n      apiKey: 'a1b2c3',\n    },\n  });\n&lt;\u002Fscript&gt;\n\n&lt;!-- Function Declaration --&gt;\n&lt;script&gt;\n  const app = new Vue({\n    data() {\n      return {\n        apiKey: 'a1b2c3',\n      };\n    },\n  });\n&lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"5-9\" class=\"language-html\"\u003E\u003Ccode data-line=\"5-9\" class=\"language-html\"\u003E&lt;script&gt;\n  import { createApp } from 'vue';\n\n  createApp({\n    data() {\n      return {\n        apiKey: 'a1b2c3',\n      };\n    },\n  }).mount('#app');\n&lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"zidingyiyuansuElements\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'zidingyiyuansuElements')\"\u003E¶\u003C\u002Fa\u003E 自定义元素 Elements\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-19\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-19')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E自定义元素白名单现在在模板编译期间执行，并且应该通过编译器选项而不是运行时配置来配置；\u003C\u002Fli\u003E\n\u003Cli\u003E特殊的\u003Ccode\u003Eis\u003C\u002Fcode\u003E prop 现在限定只能在\u003Ccode\u003E&lt;component&gt;\u003C\u002Fcode\u003E上使用；\u003C\u002Fli\u003E\n\u003Cli\u003E提供新的\u003Ccode\u003Ev-is\u003C\u002Fcode\u003E指令以支持 2.x 的使用情况；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-7\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-7')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003E\u002F\u002F 这可以使 Vue 忽略在外部定义的自定义元素\n\u002F\u002F (e.g., 使用 Web Components APIs 定义的元素)\n\nVue.config.ignoredElements = ['plastic-button'];\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cp\u003E使用打包工具选项定义的情况：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003E\u002F\u002F in webpack config\nrules: [\n  {\n    test: \u002F\\.vue$\u002F,\n    use: 'vue-loader',\n    options: {\n      compilerOptions: {\n        isCustomElement: tag =&gt; tag === 'plastic-button',\n      },\n    },\n  },\n  \u002F\u002F ...\n];\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E使用运行时定义的情况（注意这种配置对预编译的模板无效）：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Econst app = Vue.createApp({});\napp.config.isCustomElement = tag =&gt; tag === 'plastic-button';\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"chacaoSlots\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'chacaoSlots')\"\u003E¶\u003C\u002Fa\u003E 插槽 Slots\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-20\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-20')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E指定 slot 的方式由对象字面量变为函数式；\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ethis.$scopedSlots\u003C\u002Fcode\u003E移除；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-8\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-8')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003E\u002F\u002F 2.x Syntax\nh(LayoutComponent, [h('div', { slot: 'header' }, this.header), h('div', { slot: 'content' }, this.content)]);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u002F\u002F 2.x 在组件内获取指定的槽\nthis.$scopedSlots.header;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003E\u002F\u002F 3.x Syntax\nh(\n  LayoutComponent,\n  {},\n  {\n    header: () =&gt; h('div', this.header),\n    content: () =&gt; h('div', this.content),\n  },\n);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003E\u002F\u002F 3.x 在组件内获取指定的槽\nthis.$slots.header;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"dongtaibangdingshuxingchuli\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'dongtaibangdingshuxingchuli')\"\u003E¶\u003C\u002Fa\u003E 动态绑定属性处理\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-21\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-21')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E删除 Vue 内部定义的“枚举属性”（\u003Ccode\u003Econtenteditable\u003C\u002Fcode\u003E，\u003Ccode\u003Edraggable\u003C\u002Fcode\u003E和\u003Ccode\u003Espellcheck\u003C\u002Fcode\u003E）概念，并将这些“枚举属性”当作非布尔值处理；\u003C\u002Fli\u003E\n\u003Cli\u003E当 DOM 上的动态属性绑定值为\u003Ccode\u003Efalse\u003C\u002Fcode\u003E时，不再删除该属性。如果需要删除属性，使用\u003Ccode\u003Enull\u003C\u002Fcode\u003E或者\u003Ccode\u003Eundefined\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"shuxingchulibianhuaduibi\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'shuxingchulibianhuaduibi')\"\u003E¶\u003C\u002Fa\u003E 属性处理变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth style=\"text-align:left\"\u003E绑定表达式\u003C\u002Fth\u003E\n\u003Cth style=\"text-align:left\"\u003E\u003Ccode\u003Efoo\u003C\u002Fcode\u003E(常规值)\u003C\u002Fth\u003E\n\u003Cth style=\"text-align:left\"\u003E\u003Ccode\u003Edraggable\u003C\u002Fcode\u003E(枚举值)\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003E:attr=&quot;null&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EN\u002FA\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Edraggable=&quot;false&quot;\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003E:attr=&quot;undefined&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EN\u002FA\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EN\u002FA\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003E:attr=&quot;true&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Efoo=&quot;true&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Edraggable=&quot;true&quot;\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003E:attr=&quot;false&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EN\u002FA\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Edraggable=&quot;false&quot;\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003E:attr=&quot;0&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Efoo=&quot;0&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Edraggable=&quot;true&quot;\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003Eattr=&quot;&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Efoo=&quot;&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Edraggable=&quot;true&quot;\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003Eattr=&quot;foo&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Efoo=&quot;foo&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Edraggable=&quot;true&quot;\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003Eattr\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Efoo=&quot;&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Edraggable=&quot;true&quot;\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth style=\"text-align:left\"\u003E绑定表达式\u003C\u002Fth\u003E\n\u003Cth style=\"text-align:left\"\u003E\u003Ccode\u003Efoo\u003C\u002Fcode\u003E(常规值)\u003C\u002Fth\u003E\n\u003Cth style=\"text-align:left\"\u003E\u003Ccode\u003Edraggable\u003C\u002Fcode\u003E(枚举值)\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003E:attr=&quot;null&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EN\u002FA\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003E\u003Cstrong\u003EN\u002FA\u003C\u002Fstrong\u003E *\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003E:attr=&quot;undefined&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EN\u002FA\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003EN\u002FA\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003E:attr=&quot;true&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Efoo=&quot;true&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Edraggable=&quot;true&quot;\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003E:attr=&quot;false&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003E\u003Cstrong\u003Efoo=&quot;false&quot;\u003C\u002Fstrong\u003E *\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Edraggable=&quot;false&quot;\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003E:attr=&quot;0&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Efoo=&quot;0&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003E\u003Cstrong\u003Edraggable=&quot;0&quot;\u003C\u002Fstrong\u003E *\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003Eattr=&quot;&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Efoo=&quot;&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003E\u003Cstrong\u003Edraggable=&quot;&quot;\u003C\u002Fstrong\u003E *\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003Eattr=&quot;foo&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Efoo=&quot;foo&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003E\u003Cstrong\u003Edraggable=&quot;o&quot;\u003C\u002Fstrong\u003E *\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"text-align:left\"\u003Eattr\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003Efoo=&quot;&quot;\u003C\u002Ftd\u003E\n\u003Ctd style=\"text-align:left\"\u003E\u003Cstrong\u003Edraggable=&quot;&quot;\u003C\u002Fstrong\u003E *\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003Cp\u003E*：发生变化\u003C\u002Fp\u003E\n\u003Chr\u003E\n\u003Ch3 id=\"zidingyizhilingDirectives\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'zidingyizhilingDirectives')\"\u003E¶\u003C\u002Fa\u003E 自定义指令 Directives\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-22\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-22')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003E重命名自定义指令的生命周期钩子，使其与组件的生命周期一致(部分)：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-text\"\u003E\u003Ccode class=\"language-text\"\u003E- bind → beforeMount\n\n- inserted → mounted\n\n- beforeUpdate: 新钩子，在元素更新前调用\n\n- update → 已删除\n\n- beforeUnmount 新钩子，在元素卸载前调用\n\n- unbind -&gt; unmounted\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E当指令应用在自定义组件时，需要在组件内使用\u003Ccode\u003Ev-bind=&quot;$attrs&quot;\u003C\u002Fcode\u003E手动绑定到具体的 DOM，因为可能存在多根元素的情况；\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-9\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-9')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;p v-highlight=&quot;yellow&quot;&gt;Highlight this text bright yellow&lt;\u002Fp&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003EVue.directive('highlight', {\n  bind(el, binding, vnode) {\n    el.style.background = binding.value;\n  },\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003Cbr\u003E\n使用在原生 DOM 的情况：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;p v-highlight=&quot;yellow&quot;&gt;Highlight this text bright yellow&lt;\u002Fp&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003Econst app = Vue.createApp({});\n\napp.directive('highlight', {\n  beforeMount(el, binding, vnode) {\n    el.style.background = binding.value;\n  },\n  mounted() {},\n  beforeUpdate() {}, \u002F\u002F new\n  updated() {},\n  beforeUnmount() {}, \u002F\u002F new\n  unmounted() {},\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E使用在自定义组件的情况：\u003C\u002Fp\u003E\n\u003Cp\u003E组件外部：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;custom-component v-highlight=&quot;yellow&quot; \u002F&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E组件内部：\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;template&gt;\n  &lt;p v-bind=&quot;$attrs&quot;&gt;Highlight this text bright yellow&lt;\u002Fp&gt;\n  &lt;p v-bind=&quot;$attrs&quot;&gt;Highlight this text bright yellow&lt;\u002Fp&gt;\n  &lt;p&gt;Keep this text normal&lt;\u002Fp&gt;\n&lt;\u002Ftemplate&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"donghuazujianTransitionComponent\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'donghuazujianTransitionComponent')\"\u003E¶\u003C\u002Fa\u003E 动画组件 Transition Component\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-23\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-23')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E当\u003Ccode\u003E&lt;transition&gt;\u003C\u002Fcode\u003E作为组件根元素时，在组件外部使用\u003Ccode\u003Ev-if\u003C\u002Fcode\u003E或者\u003Ccode\u003Ev-show\u003C\u002Fcode\u003E改变显隐值将不再生效，需要暴露指定值来控制显隐以驱动 transition 动画；\u003C\u002Fli\u003E\n\u003Cli\u003E将\u003Ccode\u003Ev-enter\u003C\u002Fcode\u003E transition class 更名为\u003Ccode\u003Ev-enter-from\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003Cli\u003E将\u003Ccode\u003Ev-leave\u003C\u002Fcode\u003E transition class 更名为\u003Ccode\u003Ev-leave-from\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-10\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-10')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E\u003Ccode\u003E&lt;transition&gt;\u003C\u002Fcode\u003E作为组件根元素：\u003C\u002Fp\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"9\" class=\"language-html\"\u003E\u003Ccode data-line=\"9\" class=\"language-html\"\u003E&lt;!-- modal component --&gt;\n&lt;template&gt;\n  &lt;transition&gt;\n    &lt;div class=&quot;modal&quot;&gt;&lt;slot \u002F&gt;&lt;\u002Fdiv&gt;\n  &lt;\u002Ftransition&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;!-- usage --&gt;\n&lt;modal v-if=&quot;showModal&quot;&gt;hello&lt;\u002Fmodal&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"9\" class=\"language-html\"\u003E\u003Ccode data-line=\"9\" class=\"language-html\"\u003E&lt;!-- modal component --&gt;\n&lt;template&gt;\n  &lt;transition&gt;\n    &lt;div v-if=&quot;show&quot; class=&quot;modal&quot;&gt;&lt;slot \u002F&gt;&lt;\u002Fdiv&gt;\n  &lt;\u002Ftransition&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;!-- usage --&gt;\n&lt;modal :show=&quot;showModal&quot;&gt;hello&lt;\u002Fmodal&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Cp\u003Eclass 更名：\u003C\u002Fp\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-css\"\u003E\u003Ccode class=\"language-css\"\u003E\u002F* before *\u002F\n.v-enter,\n.v-leave-to {\n  opacity: 0;\n}\n.v-leave,\n.v-enter-to {\n  opacity: 1;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-css\"\u003E\u003Ccode class=\"language-css\"\u003E\u002F* after *\u002F\n.v-enter-from,\n.v-leave-to {\n  opacity: 0;\n}\n.v-leave-from,\n.v-enter-to {\n  opacity: 1;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"zhentingqiAPIWatch\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'zhentingqiAPIWatch')\"\u003E¶\u003C\u002Fa\u003E 侦听器 API Watch\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-24\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-24')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E更改形如\u003Ccode\u003Ea.b.c\u003C\u002Fcode\u003E的键路径观察方式为计算函数式，如\u003Ccode\u003E() =&gt; this.a.b.c\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-11\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-11')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003E\u002F\u002F 键路径\nvm.$watch('a.b.c', function(newVal, oldVal) {\n  \u002F\u002F 做点什么\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"2,10\" class=\"language-javascript\"\u003E\u003Ccode data-line=\"2,10\" class=\"language-javascript\"\u003Evm.$watch(\n  () =&gt; vm.a.b.c,\n  (newVal, oldVal) =&gt; {\n    \u002F\u002F 做点什么\n  },\n);\n\n\u002F\u002F 多依赖的情况\nvm.$watch(\n  () =&gt; vm.a.b.c + vm.d.e.f,\n  (newVal, oldVal) =&gt; {\n    \u002F\u002F 做点什么\n  },\n);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"xiangyingshizhuruProvideInject\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'xiangyingshizhuruProvideInject')\"\u003E¶\u003C\u002Fa\u003E 响应式注入 Provide \u002F Inject\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-25\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-25')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E通过\u003Ccode\u003Eref\u003C\u002Fcode\u003E、\u003Ccode\u003Ecomputed\u003C\u002Fcode\u003E和\u003Ccode\u003Ereactive\u003C\u002Fcode\u003E api，现在可以注入响应式的值和该值对应的更新方法；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-12\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-12')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003E\u002F\u002F 父级组件提供 'foo'\nvar Provider = {\n  provide: {\n    foo: 'bar',\n  },\n  \u002F\u002F ...\n};\n\n\u002F\u002F 子组件注入 'foo'\nvar Child = {\n  inject: ['foo'],\n  created() {\n    console.log(this.foo); \u002F\u002F =&gt; &quot;bar&quot;\n  },\n  \u002F\u002F ...\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cp\u003E在组件选项内定义的情况：\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"5\" class=\"language-js\"\u003E\u003Ccode data-line=\"5\" class=\"language-js\"\u003Eapp.component('todo-list', {\n  \u002F\u002F ...\n  provide() {\n    return {\n      todoLength: Vue.computed(() =&gt; this.todos.length),\n    };\n  },\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E在\u003Ccode\u003Esetup\u003C\u002Fcode\u003E函数内定义的情况：\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"21-23,27\" class=\"language-html\"\u003E\u003Ccode data-line=\"21-23,27\" class=\"language-html\"\u003E&lt;!-- src\u002Fcomponents\u002FMyMap.vue --&gt;\n&lt;template&gt;\n  &lt;MyMarker \u002F&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\n  import { provide, reactive, ref } from 'vue'\n  import MyMarker from '.\u002FMyMarker.vue\n\n  export default {\n    components: {\n      MyMarker\n    },\n    setup() {\n      const location = ref('North Pole')\n      const geolocation = reactive({\n        longitude: 90,\n        latitude: 135\n      })\n\n      const updateLocation = () =&gt; {\n        location.value = 'South Pole'\n      }\n\n      provide('location', location)\n      provide('geolocation', geolocation)\n      provide('updateLocation', updateLocation)\n    }\n  }\n&lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  data-line=\"9,14\" class=\"language-html\"\u003E\u003Ccode data-line=\"9,14\" class=\"language-html\"\u003E&lt;!-- src\u002Fcomponents\u002FMyMarker.vue --&gt;\n&lt;script&gt;\n  import { inject } from 'vue';\n\n  export default {\n    setup() {\n      const userLocation = inject('location', 'The Universe');\n      const userGeolocation = inject('geolocation');\n      const updateUserLocation = inject('updateUserLocation'); \u002F\u002F 注入更新方法\n\n      return {\n        userLocation,\n        userGeolocation,\n        updateUserLocation, \u002F\u002F 可再导出更新方法\n      };\n    },\n  };\n&lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch2 id=\"REMOVEDfeiqigongnengtexing\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'REMOVEDfeiqigongnengtexing')\"\u003E¶\u003C\u002Fa\u003E REMOVED | 废弃功能特性\u003C\u002Fh2\u003E\n\u003Ch3 id=\"shijianAPIEvents\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'shijianAPIEvents')\"\u003E¶\u003C\u002Fa\u003E 事件 API Events\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-26\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-26')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003E$on\u003C\u002Fcode\u003E，\u003Ccode\u003E$off\u003C\u002Fcode\u003E和\u003Ccode\u003E$once\u003C\u002Fcode\u003E实例方法移除。应用实例不再提供事件中心的接口。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-13\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-13')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003E\u002F\u002F eventHub.js\n\nconst eventHub = new Vue();\n\nexport default eventHub;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003E\u002F\u002F ChildComponent.vue\nimport eventHub from '.\u002FeventHub';\n\nexport default {\n  mounted() {\n    \u002F\u002F adding eventHub listener\n    eventHub.$on('custom-event', () =&gt; {\n      console.log('Custom event triggered!');\n    });\n  },\n  beforeDestroy() {\n    \u002F\u002F removing eventHub listener\n    eventHub.$off('custom-event');\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  class=\"language-javascript\"\u003E\u003Ccode class=\"language-javascript\"\u003E\u002F\u002F ParentComponent.vue\nimport eventHub from '.\u002FeventHub';\n\nexport default {\n  methods: {\n    callGlobalCustomEvent() {\n      eventHub.$emit('custom-event'); \u002F\u002F if ChildComponent is mounted, we will have a message in the console\n    },\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003E$on\u003C\u002Fcode\u003E，\u003Ccode\u003E$off\u003C\u002Fcode\u003E和\u003Ccode\u003E$once\u003C\u002Fcode\u003E实例方法移除。保留\u003Ccode\u003E$emit\u003C\u002Fcode\u003E实例方法作为子组件发射自定义事件的 api。\u003C\u002Fp\u003E\n\u003Chr\u003E\n\u003Ch3 id=\"shijianxiushifuKeyCode\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'shijianxiushifuKeyCode')\"\u003E¶\u003C\u002Fa\u003E 事件修饰符 KeyCode\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-27\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-27')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Ev-on\u003C\u002Fcode\u003E指令的修饰符不再支持 keyCodes；\u003C\u002Fli\u003E\n\u003Cli\u003E移除\u003Ccode\u003Econfig.keyCodes\u003C\u002Fcode\u003E;\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-14\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-14')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;!-- keyCode version --&gt;\n&lt;input v-on:keyup.13=&quot;submit&quot; \u002F&gt;\n\n&lt;!-- alias version --&gt;\n&lt;input v-on:keyup.enter=&quot;submit&quot; \u002F&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  class=\"language-js\"\u003E\u003Ccode class=\"language-js\"\u003EVue.config.keyCodes = {\n  f1: 112,\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;!-- keyCode version --&gt;\n&lt;input v-on:keyup.112=&quot;showHelpText&quot; \u002F&gt;\n\n&lt;!-- custom alias version --&gt;\n&lt;input v-on:keyup.f1=&quot;showHelpText&quot; \u002F&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;!-- Vue 3 Key Modifier on v-on --&gt;\n&lt;input v-on:keyup.delete=&quot;confirmDelete&quot; \u002F&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"guolvqiFilters\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'guolvqiFilters')\"\u003E¶\u003C\u002Fa\u003E 过滤器 Filters\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-28\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-28')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E完全移除\u003Ccode\u003EFilters\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-15\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-15')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;template&gt;\n  &lt;h1&gt;Bank Account Balance&lt;\u002Fh1&gt;\n  &lt;p&gt;{{ accountBalance | currencyUSD }}&lt;\u002Fp&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\n  export default {\n    props: {\n      accountBalance: {\n        type: Number,\n        required: true,\n      },\n    },\n    filters: {\n      currencyUSD(value) {\n        return '$' + value;\n      },\n    },\n  };\n&lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cp\u003E使用计算属性或者自定义方法处理：\u003C\u002Fp\u003E\n\u003Cpre  data-line=\"15-17\" class=\"language-html\"\u003E\u003Ccode data-line=\"15-17\" class=\"language-html\"\u003E&lt;template&gt;\n  &lt;h1&gt;Bank Account Balance&lt;\u002Fh1&gt;\n  &lt;p&gt;{{ accountInUSD }}&lt;\u002Fp&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\n  export default {\n    props: {\n      accountBalance: {\n        type: Number,\n        required: true,\n      },\n    },\n    computed: {\n      accountInUSD() {\n        return '$' + this.accountBalance;\n      },\n    },\n  };\n&lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Chr\u003E\n\u003Ch3 id=\"hangneimobanshuxinginlinetemplate\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'hangneimobanshuxinginlinetemplate')\"\u003E¶\u003C\u002Fa\u003E 行内模板属性 inline-template\u003C\u002Fh3\u003E\n\u003Ch5 id=\"bianhuamiaoshu-29\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'bianhuamiaoshu-29')\"\u003E¶\u003C\u002Fa\u003E 变化描述：\u003C\u002Fh5\u003E\n\u003Cul\u003E\n\u003Cli\u003E完全移除\u003Ccode\u003Einline-template\u003C\u002Fcode\u003E方法；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch5 id=\"daimabianhuaduibi-16\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'daimabianhuaduibi-16')\"\u003E¶\u003C\u002Fa\u003E 代码变化对比：\u003C\u002Fh5\u003E\n\u003Cp\u003E2.x\u003C\u002Fp\u003E\n\u003Cpre  class=\"language-html\"\u003E\u003Ccode class=\"language-html\"\u003E&lt;my-component inline-template&gt;\n  &lt;div&gt;\n    &lt;p&gt;These are compiled as the component's own template.&lt;\u002Fp&gt;\n    &lt;p&gt;Not parent's transclusion content.&lt;\u002Fp&gt;\n  &lt;\u002Fdiv&gt;\n&lt;\u002Fmy-component&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E3.x\u003C\u002Fp\u003E\n\u003Cp\u003E不再支持\u003Ccode\u003Einline-template\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Ch2 id=\"zongjie\"\u003E\u003Ca class=\"cs-header-anchor\" href=\"\" onclick=\"!this.getAttribute('href') &amp;&amp; this.setAttribute('href', window.location.origin+window.location.pathname+'#'+'zongjie')\"\u003E¶\u003C\u002Fa\u003E 总结\u003C\u002Fh2\u003E\n\u003Cp\u003E通过学习 Vue 3.x 的新特性可以体会到，Vue 在\u003Cstrong\u003E性能\u003C\u002Fstrong\u003E、\u003Cstrong\u003E工程化\u003C\u002Fstrong\u003E和\u003Cstrong\u003E可移植性\u003C\u002Fstrong\u003E这三个大方向里面作出了很大的努力，主要体现在这五个方面：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003ETree-shaking support；\n\u003Cul\u003E\n\u003Cli\u003E大多数可选功能现在都支持 Tree-shaking，例如 Composition API、\u003Ccode\u003Ev-model\u003C\u002Fcode\u003E、\u003Ccode\u003E&lt;transition&gt;\u003C\u002Fcode\u003E；\u003C\u002Fli\u003E\n\u003Cli\u003E最小可运行的 HelloWorld 例子的文件总大小: 13.5kb， 只使用 Composition API 的情况下最小可达到 11.75kb；\u003C\u002Fli\u003E\n\u003Cli\u003E全运行时打包总大小为: 22.5kb，功能更多更强大，但是大小比 Vue 2 更小；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EComposition API；\n\u003Cul\u003E\n\u003Cli\u003E可与原有的选项 API 同时存在，更灵活和更易于 2.x 升级 3.x，同时利于开发人员 \b 过渡升级版本；\u003C\u002Fli\u003E\n\u003Cli\u003E更加灵活的逻辑组合和复用，大大地提升了复杂组件的可维护性；\u003C\u002Fli\u003E\n\u003Cli\u003EReactivity 模块可作为独立的库使用，使得 Vue 3.x 在与其它框架配合使用时更加灵活；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EFragment, Teleport, Suspense；\n\u003Cul\u003E\n\u003Cli\u003EFragment 特性的到来，可以使\u003Ccode\u003E&lt;template&gt;\u003C\u002Fcode\u003E中不再局限于单一的根节点，同时\u003Ccode\u003Erender\u003C\u002Fcode\u003E函数也可以返回包含多个 Vnode 的数组；\u003C\u002Fli\u003E\n\u003Cli\u003ETeleport 组件让原来的复杂组件的嵌套关系变得更加灵活和清晰；\u003C\u002Fli\u003E\n\u003Cli\u003ESuspense 组件大大减少了书写异步数据 DOM 渲染和异步组件的代码量；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EBetter TypeScript support；\n\u003Cul\u003E\n\u003Cli\u003EVue 3.x 库代码编写由原来的\u003Ccode\u003Eflow\u003C\u002Fcode\u003E转换为\u003Ccode\u003Ets\u003C\u002Fcode\u003E，所以在编写业务代码时使用 ts 可以大大受益；\u003C\u002Fli\u003E\n\u003Cli\u003EAPI 在 js 和 ts 环境下的使用一致；\u003C\u002Fli\u003E\n\u003Cli\u003E支持 TSX；\u003C\u002Fli\u003E\n\u003Cli\u003EClass 组件仍然可用（需要引入\u003Ccode\u003Evue-class-component@next\u003C\u002Fcode\u003E）；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003ECustom Renderer API；\n\u003Cul\u003E\n\u003Cli\u003E允许生成自定义的 renderer，降低了 Vue 3.x 迁移到其它平台的难度，比如小程序、Weex 等；\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n",bodyBegin:7,frontmatter:"title: 一文看全 Vue 3.X 带来的新变化\ndate: '2020-07-19'\nspoiler: 只关注区别于 Vue 2.x 实现，助力快速过渡到 Vue 3.x",link:a,next:{title:"控制前端业务重复请求的一个新思路",date:"2020-09-13",spoiler:"少一个请求，少一分负担",link:"\u002Fpost\u002Fprevent-duplicate-requests\u002F",min2read:"☕️☕️☕️ 13 min read",wordcount:"3.3k"},prev:{title:"Markdown基本语法与扩展语法",date:"2019-07-07",spoiler:"博客文章的编写利器",link:"\u002Fpost\u002Fmarkdown-grammar-sammple\u002F",min2read:"☕️☕️☕️☕️☕️ 26 min read",wordcount:"4.3k"}}}],fetch:[],mutations:void 0}}("\u002Fpost\u002Fnew-for-vue-3\u002F")));